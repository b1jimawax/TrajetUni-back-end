
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Passager
 * 
 */
export type Passager = $Result.DefaultSelection<Prisma.$PassagerPayload>
/**
 * Model Reservation
 * 
 */
export type Reservation = $Result.DefaultSelection<Prisma.$ReservationPayload>
/**
 * Model Conducteur
 * 
 */
export type Conducteur = $Result.DefaultSelection<Prisma.$ConducteurPayload>
/**
 * Model Trajet
 * 
 */
export type Trajet = $Result.DefaultSelection<Prisma.$TrajetPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Passagers
 * const passagers = await prisma.passager.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Passagers
   * const passagers = await prisma.passager.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.passager`: Exposes CRUD operations for the **Passager** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Passagers
    * const passagers = await prisma.passager.findMany()
    * ```
    */
  get passager(): Prisma.PassagerDelegate<ExtArgs>;

  /**
   * `prisma.reservation`: Exposes CRUD operations for the **Reservation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservations
    * const reservations = await prisma.reservation.findMany()
    * ```
    */
  get reservation(): Prisma.ReservationDelegate<ExtArgs>;

  /**
   * `prisma.conducteur`: Exposes CRUD operations for the **Conducteur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conducteurs
    * const conducteurs = await prisma.conducteur.findMany()
    * ```
    */
  get conducteur(): Prisma.ConducteurDelegate<ExtArgs>;

  /**
   * `prisma.trajet`: Exposes CRUD operations for the **Trajet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trajets
    * const trajets = await prisma.trajet.findMany()
    * ```
    */
  get trajet(): Prisma.TrajetDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.8.1
   * Query Engine version: 78caf6feeaed953168c64e15a249c3e9a033ebe2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Passager: 'Passager',
    Reservation: 'Reservation',
    Conducteur: 'Conducteur',
    Trajet: 'Trajet'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'passager' | 'reservation' | 'conducteur' | 'trajet'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Passager: {
        payload: Prisma.$PassagerPayload<ExtArgs>
        fields: Prisma.PassagerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PassagerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PassagerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagerPayload>
          }
          findFirst: {
            args: Prisma.PassagerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PassagerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagerPayload>
          }
          findMany: {
            args: Prisma.PassagerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagerPayload>[]
          }
          create: {
            args: Prisma.PassagerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagerPayload>
          }
          createMany: {
            args: Prisma.PassagerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PassagerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagerPayload>
          }
          update: {
            args: Prisma.PassagerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagerPayload>
          }
          deleteMany: {
            args: Prisma.PassagerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PassagerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PassagerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagerPayload>
          }
          aggregate: {
            args: Prisma.PassagerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePassager>
          }
          groupBy: {
            args: Prisma.PassagerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PassagerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PassagerCountArgs<ExtArgs>,
            result: $Utils.Optional<PassagerCountAggregateOutputType> | number
          }
        }
      }
      Reservation: {
        payload: Prisma.$ReservationPayload<ExtArgs>
        fields: Prisma.ReservationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReservationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReservationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findFirst: {
            args: Prisma.ReservationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReservationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findMany: {
            args: Prisma.ReservationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>[]
          }
          create: {
            args: Prisma.ReservationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          createMany: {
            args: Prisma.ReservationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReservationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          update: {
            args: Prisma.ReservationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          deleteMany: {
            args: Prisma.ReservationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReservationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReservationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          aggregate: {
            args: Prisma.ReservationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReservation>
          }
          groupBy: {
            args: Prisma.ReservationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReservationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReservationCountArgs<ExtArgs>,
            result: $Utils.Optional<ReservationCountAggregateOutputType> | number
          }
        }
      }
      Conducteur: {
        payload: Prisma.$ConducteurPayload<ExtArgs>
        fields: Prisma.ConducteurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConducteurFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConducteurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConducteurFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConducteurPayload>
          }
          findFirst: {
            args: Prisma.ConducteurFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConducteurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConducteurFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConducteurPayload>
          }
          findMany: {
            args: Prisma.ConducteurFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConducteurPayload>[]
          }
          create: {
            args: Prisma.ConducteurCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConducteurPayload>
          }
          createMany: {
            args: Prisma.ConducteurCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ConducteurDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConducteurPayload>
          }
          update: {
            args: Prisma.ConducteurUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConducteurPayload>
          }
          deleteMany: {
            args: Prisma.ConducteurDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ConducteurUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ConducteurUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConducteurPayload>
          }
          aggregate: {
            args: Prisma.ConducteurAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateConducteur>
          }
          groupBy: {
            args: Prisma.ConducteurGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConducteurGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConducteurCountArgs<ExtArgs>,
            result: $Utils.Optional<ConducteurCountAggregateOutputType> | number
          }
        }
      }
      Trajet: {
        payload: Prisma.$TrajetPayload<ExtArgs>
        fields: Prisma.TrajetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrajetFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrajetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrajetFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrajetPayload>
          }
          findFirst: {
            args: Prisma.TrajetFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrajetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrajetFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrajetPayload>
          }
          findMany: {
            args: Prisma.TrajetFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrajetPayload>[]
          }
          create: {
            args: Prisma.TrajetCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrajetPayload>
          }
          createMany: {
            args: Prisma.TrajetCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TrajetDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrajetPayload>
          }
          update: {
            args: Prisma.TrajetUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrajetPayload>
          }
          deleteMany: {
            args: Prisma.TrajetDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TrajetUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TrajetUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrajetPayload>
          }
          aggregate: {
            args: Prisma.TrajetAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTrajet>
          }
          groupBy: {
            args: Prisma.TrajetGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TrajetGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrajetCountArgs<ExtArgs>,
            result: $Utils.Optional<TrajetCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PassagerCountOutputType
   */

  export type PassagerCountOutputType = {
    reservations: number
  }

  export type PassagerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | PassagerCountOutputTypeCountReservationsArgs
  }

  // Custom InputTypes

  /**
   * PassagerCountOutputType without action
   */
  export type PassagerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassagerCountOutputType
     */
    select?: PassagerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PassagerCountOutputType without action
   */
  export type PassagerCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
  }



  /**
   * Count Type ConducteurCountOutputType
   */

  export type ConducteurCountOutputType = {
    trajets: number
  }

  export type ConducteurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trajets?: boolean | ConducteurCountOutputTypeCountTrajetsArgs
  }

  // Custom InputTypes

  /**
   * ConducteurCountOutputType without action
   */
  export type ConducteurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConducteurCountOutputType
     */
    select?: ConducteurCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ConducteurCountOutputType without action
   */
  export type ConducteurCountOutputTypeCountTrajetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrajetWhereInput
  }



  /**
   * Count Type TrajetCountOutputType
   */

  export type TrajetCountOutputType = {
    reservations: number
  }

  export type TrajetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | TrajetCountOutputTypeCountReservationsArgs
  }

  // Custom InputTypes

  /**
   * TrajetCountOutputType without action
   */
  export type TrajetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrajetCountOutputType
     */
    select?: TrajetCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TrajetCountOutputType without action
   */
  export type TrajetCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Passager
   */

  export type AggregatePassager = {
    _count: PassagerCountAggregateOutputType | null
    _avg: PassagerAvgAggregateOutputType | null
    _sum: PassagerSumAggregateOutputType | null
    _min: PassagerMinAggregateOutputType | null
    _max: PassagerMaxAggregateOutputType | null
  }

  export type PassagerAvgAggregateOutputType = {
    id_passager: number | null
  }

  export type PassagerSumAggregateOutputType = {
    id_passager: number | null
  }

  export type PassagerMinAggregateOutputType = {
    id_passager: number | null
    nom_passager: string | null
    prenom_passager: string | null
    numero_de_telephone: string | null
    mot_de_passe: string | null
    photo_passager: string | null
  }

  export type PassagerMaxAggregateOutputType = {
    id_passager: number | null
    nom_passager: string | null
    prenom_passager: string | null
    numero_de_telephone: string | null
    mot_de_passe: string | null
    photo_passager: string | null
  }

  export type PassagerCountAggregateOutputType = {
    id_passager: number
    nom_passager: number
    prenom_passager: number
    numero_de_telephone: number
    mot_de_passe: number
    photo_passager: number
    _all: number
  }


  export type PassagerAvgAggregateInputType = {
    id_passager?: true
  }

  export type PassagerSumAggregateInputType = {
    id_passager?: true
  }

  export type PassagerMinAggregateInputType = {
    id_passager?: true
    nom_passager?: true
    prenom_passager?: true
    numero_de_telephone?: true
    mot_de_passe?: true
    photo_passager?: true
  }

  export type PassagerMaxAggregateInputType = {
    id_passager?: true
    nom_passager?: true
    prenom_passager?: true
    numero_de_telephone?: true
    mot_de_passe?: true
    photo_passager?: true
  }

  export type PassagerCountAggregateInputType = {
    id_passager?: true
    nom_passager?: true
    prenom_passager?: true
    numero_de_telephone?: true
    mot_de_passe?: true
    photo_passager?: true
    _all?: true
  }

  export type PassagerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Passager to aggregate.
     */
    where?: PassagerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passagers to fetch.
     */
    orderBy?: PassagerOrderByWithRelationInput | PassagerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PassagerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passagers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passagers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Passagers
    **/
    _count?: true | PassagerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PassagerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PassagerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PassagerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PassagerMaxAggregateInputType
  }

  export type GetPassagerAggregateType<T extends PassagerAggregateArgs> = {
        [P in keyof T & keyof AggregatePassager]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePassager[P]>
      : GetScalarType<T[P], AggregatePassager[P]>
  }




  export type PassagerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassagerWhereInput
    orderBy?: PassagerOrderByWithAggregationInput | PassagerOrderByWithAggregationInput[]
    by: PassagerScalarFieldEnum[] | PassagerScalarFieldEnum
    having?: PassagerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PassagerCountAggregateInputType | true
    _avg?: PassagerAvgAggregateInputType
    _sum?: PassagerSumAggregateInputType
    _min?: PassagerMinAggregateInputType
    _max?: PassagerMaxAggregateInputType
  }

  export type PassagerGroupByOutputType = {
    id_passager: number
    nom_passager: string
    prenom_passager: string
    numero_de_telephone: string
    mot_de_passe: string
    photo_passager: string
    _count: PassagerCountAggregateOutputType | null
    _avg: PassagerAvgAggregateOutputType | null
    _sum: PassagerSumAggregateOutputType | null
    _min: PassagerMinAggregateOutputType | null
    _max: PassagerMaxAggregateOutputType | null
  }

  type GetPassagerGroupByPayload<T extends PassagerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PassagerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PassagerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PassagerGroupByOutputType[P]>
            : GetScalarType<T[P], PassagerGroupByOutputType[P]>
        }
      >
    >


  export type PassagerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_passager?: boolean
    nom_passager?: boolean
    prenom_passager?: boolean
    numero_de_telephone?: boolean
    mot_de_passe?: boolean
    photo_passager?: boolean
    reservations?: boolean | Passager$reservationsArgs<ExtArgs>
    _count?: boolean | PassagerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passager"]>

  export type PassagerSelectScalar = {
    id_passager?: boolean
    nom_passager?: boolean
    prenom_passager?: boolean
    numero_de_telephone?: boolean
    mot_de_passe?: boolean
    photo_passager?: boolean
  }

  export type PassagerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | Passager$reservationsArgs<ExtArgs>
    _count?: boolean | PassagerCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PassagerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Passager"
    objects: {
      reservations: Prisma.$ReservationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_passager: number
      nom_passager: string
      prenom_passager: string
      numero_de_telephone: string
      mot_de_passe: string
      photo_passager: string
    }, ExtArgs["result"]["passager"]>
    composites: {}
  }


  type PassagerGetPayload<S extends boolean | null | undefined | PassagerDefaultArgs> = $Result.GetResult<Prisma.$PassagerPayload, S>

  type PassagerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PassagerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PassagerCountAggregateInputType | true
    }

  export interface PassagerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Passager'], meta: { name: 'Passager' } }
    /**
     * Find zero or one Passager that matches the filter.
     * @param {PassagerFindUniqueArgs} args - Arguments to find a Passager
     * @example
     * // Get one Passager
     * const passager = await prisma.passager.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PassagerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PassagerFindUniqueArgs<ExtArgs>>
    ): Prisma__PassagerClient<$Result.GetResult<Prisma.$PassagerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Passager that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PassagerFindUniqueOrThrowArgs} args - Arguments to find a Passager
     * @example
     * // Get one Passager
     * const passager = await prisma.passager.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PassagerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PassagerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PassagerClient<$Result.GetResult<Prisma.$PassagerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Passager that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassagerFindFirstArgs} args - Arguments to find a Passager
     * @example
     * // Get one Passager
     * const passager = await prisma.passager.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PassagerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PassagerFindFirstArgs<ExtArgs>>
    ): Prisma__PassagerClient<$Result.GetResult<Prisma.$PassagerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Passager that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassagerFindFirstOrThrowArgs} args - Arguments to find a Passager
     * @example
     * // Get one Passager
     * const passager = await prisma.passager.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PassagerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PassagerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PassagerClient<$Result.GetResult<Prisma.$PassagerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Passagers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassagerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Passagers
     * const passagers = await prisma.passager.findMany()
     * 
     * // Get first 10 Passagers
     * const passagers = await prisma.passager.findMany({ take: 10 })
     * 
     * // Only select the `id_passager`
     * const passagerWithId_passagerOnly = await prisma.passager.findMany({ select: { id_passager: true } })
     * 
    **/
    findMany<T extends PassagerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassagerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassagerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Passager.
     * @param {PassagerCreateArgs} args - Arguments to create a Passager.
     * @example
     * // Create one Passager
     * const Passager = await prisma.passager.create({
     *   data: {
     *     // ... data to create a Passager
     *   }
     * })
     * 
    **/
    create<T extends PassagerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PassagerCreateArgs<ExtArgs>>
    ): Prisma__PassagerClient<$Result.GetResult<Prisma.$PassagerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Passagers.
     *     @param {PassagerCreateManyArgs} args - Arguments to create many Passagers.
     *     @example
     *     // Create many Passagers
     *     const passager = await prisma.passager.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PassagerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassagerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Passager.
     * @param {PassagerDeleteArgs} args - Arguments to delete one Passager.
     * @example
     * // Delete one Passager
     * const Passager = await prisma.passager.delete({
     *   where: {
     *     // ... filter to delete one Passager
     *   }
     * })
     * 
    **/
    delete<T extends PassagerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PassagerDeleteArgs<ExtArgs>>
    ): Prisma__PassagerClient<$Result.GetResult<Prisma.$PassagerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Passager.
     * @param {PassagerUpdateArgs} args - Arguments to update one Passager.
     * @example
     * // Update one Passager
     * const passager = await prisma.passager.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PassagerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PassagerUpdateArgs<ExtArgs>>
    ): Prisma__PassagerClient<$Result.GetResult<Prisma.$PassagerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Passagers.
     * @param {PassagerDeleteManyArgs} args - Arguments to filter Passagers to delete.
     * @example
     * // Delete a few Passagers
     * const { count } = await prisma.passager.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PassagerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassagerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Passagers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassagerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Passagers
     * const passager = await prisma.passager.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PassagerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PassagerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Passager.
     * @param {PassagerUpsertArgs} args - Arguments to update or create a Passager.
     * @example
     * // Update or create a Passager
     * const passager = await prisma.passager.upsert({
     *   create: {
     *     // ... data to create a Passager
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Passager we want to update
     *   }
     * })
    **/
    upsert<T extends PassagerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PassagerUpsertArgs<ExtArgs>>
    ): Prisma__PassagerClient<$Result.GetResult<Prisma.$PassagerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Passagers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassagerCountArgs} args - Arguments to filter Passagers to count.
     * @example
     * // Count the number of Passagers
     * const count = await prisma.passager.count({
     *   where: {
     *     // ... the filter for the Passagers we want to count
     *   }
     * })
    **/
    count<T extends PassagerCountArgs>(
      args?: Subset<T, PassagerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PassagerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Passager.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassagerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PassagerAggregateArgs>(args: Subset<T, PassagerAggregateArgs>): Prisma.PrismaPromise<GetPassagerAggregateType<T>>

    /**
     * Group by Passager.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassagerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PassagerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PassagerGroupByArgs['orderBy'] }
        : { orderBy?: PassagerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PassagerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPassagerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Passager model
   */
  readonly fields: PassagerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Passager.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PassagerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    reservations<T extends Passager$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, Passager$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Passager model
   */ 
  interface PassagerFieldRefs {
    readonly id_passager: FieldRef<"Passager", 'Int'>
    readonly nom_passager: FieldRef<"Passager", 'String'>
    readonly prenom_passager: FieldRef<"Passager", 'String'>
    readonly numero_de_telephone: FieldRef<"Passager", 'String'>
    readonly mot_de_passe: FieldRef<"Passager", 'String'>
    readonly photo_passager: FieldRef<"Passager", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Passager findUnique
   */
  export type PassagerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passager
     */
    select?: PassagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassagerInclude<ExtArgs> | null
    /**
     * Filter, which Passager to fetch.
     */
    where: PassagerWhereUniqueInput
  }


  /**
   * Passager findUniqueOrThrow
   */
  export type PassagerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passager
     */
    select?: PassagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassagerInclude<ExtArgs> | null
    /**
     * Filter, which Passager to fetch.
     */
    where: PassagerWhereUniqueInput
  }


  /**
   * Passager findFirst
   */
  export type PassagerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passager
     */
    select?: PassagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassagerInclude<ExtArgs> | null
    /**
     * Filter, which Passager to fetch.
     */
    where?: PassagerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passagers to fetch.
     */
    orderBy?: PassagerOrderByWithRelationInput | PassagerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Passagers.
     */
    cursor?: PassagerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passagers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passagers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Passagers.
     */
    distinct?: PassagerScalarFieldEnum | PassagerScalarFieldEnum[]
  }


  /**
   * Passager findFirstOrThrow
   */
  export type PassagerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passager
     */
    select?: PassagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassagerInclude<ExtArgs> | null
    /**
     * Filter, which Passager to fetch.
     */
    where?: PassagerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passagers to fetch.
     */
    orderBy?: PassagerOrderByWithRelationInput | PassagerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Passagers.
     */
    cursor?: PassagerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passagers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passagers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Passagers.
     */
    distinct?: PassagerScalarFieldEnum | PassagerScalarFieldEnum[]
  }


  /**
   * Passager findMany
   */
  export type PassagerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passager
     */
    select?: PassagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassagerInclude<ExtArgs> | null
    /**
     * Filter, which Passagers to fetch.
     */
    where?: PassagerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passagers to fetch.
     */
    orderBy?: PassagerOrderByWithRelationInput | PassagerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Passagers.
     */
    cursor?: PassagerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passagers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passagers.
     */
    skip?: number
    distinct?: PassagerScalarFieldEnum | PassagerScalarFieldEnum[]
  }


  /**
   * Passager create
   */
  export type PassagerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passager
     */
    select?: PassagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassagerInclude<ExtArgs> | null
    /**
     * The data needed to create a Passager.
     */
    data: XOR<PassagerCreateInput, PassagerUncheckedCreateInput>
  }


  /**
   * Passager createMany
   */
  export type PassagerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Passagers.
     */
    data: PassagerCreateManyInput | PassagerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Passager update
   */
  export type PassagerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passager
     */
    select?: PassagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassagerInclude<ExtArgs> | null
    /**
     * The data needed to update a Passager.
     */
    data: XOR<PassagerUpdateInput, PassagerUncheckedUpdateInput>
    /**
     * Choose, which Passager to update.
     */
    where: PassagerWhereUniqueInput
  }


  /**
   * Passager updateMany
   */
  export type PassagerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Passagers.
     */
    data: XOR<PassagerUpdateManyMutationInput, PassagerUncheckedUpdateManyInput>
    /**
     * Filter which Passagers to update
     */
    where?: PassagerWhereInput
  }


  /**
   * Passager upsert
   */
  export type PassagerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passager
     */
    select?: PassagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassagerInclude<ExtArgs> | null
    /**
     * The filter to search for the Passager to update in case it exists.
     */
    where: PassagerWhereUniqueInput
    /**
     * In case the Passager found by the `where` argument doesn't exist, create a new Passager with this data.
     */
    create: XOR<PassagerCreateInput, PassagerUncheckedCreateInput>
    /**
     * In case the Passager was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PassagerUpdateInput, PassagerUncheckedUpdateInput>
  }


  /**
   * Passager delete
   */
  export type PassagerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passager
     */
    select?: PassagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassagerInclude<ExtArgs> | null
    /**
     * Filter which Passager to delete.
     */
    where: PassagerWhereUniqueInput
  }


  /**
   * Passager deleteMany
   */
  export type PassagerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Passagers to delete
     */
    where?: PassagerWhereInput
  }


  /**
   * Passager.reservations
   */
  export type Passager$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    cursor?: ReservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Passager without action
   */
  export type PassagerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passager
     */
    select?: PassagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassagerInclude<ExtArgs> | null
  }



  /**
   * Model Reservation
   */

  export type AggregateReservation = {
    _count: ReservationCountAggregateOutputType | null
    _avg: ReservationAvgAggregateOutputType | null
    _sum: ReservationSumAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  export type ReservationAvgAggregateOutputType = {
    id_de_reservation: number | null
    id_trajet: number | null
    id_passager: number | null
  }

  export type ReservationSumAggregateOutputType = {
    id_de_reservation: number | null
    id_trajet: number | null
    id_passager: number | null
  }

  export type ReservationMinAggregateOutputType = {
    id_de_reservation: number | null
    id_trajet: number | null
    id_passager: number | null
    status: string | null
  }

  export type ReservationMaxAggregateOutputType = {
    id_de_reservation: number | null
    id_trajet: number | null
    id_passager: number | null
    status: string | null
  }

  export type ReservationCountAggregateOutputType = {
    id_de_reservation: number
    id_trajet: number
    id_passager: number
    status: number
    _all: number
  }


  export type ReservationAvgAggregateInputType = {
    id_de_reservation?: true
    id_trajet?: true
    id_passager?: true
  }

  export type ReservationSumAggregateInputType = {
    id_de_reservation?: true
    id_trajet?: true
    id_passager?: true
  }

  export type ReservationMinAggregateInputType = {
    id_de_reservation?: true
    id_trajet?: true
    id_passager?: true
    status?: true
  }

  export type ReservationMaxAggregateInputType = {
    id_de_reservation?: true
    id_trajet?: true
    id_passager?: true
    status?: true
  }

  export type ReservationCountAggregateInputType = {
    id_de_reservation?: true
    id_trajet?: true
    id_passager?: true
    status?: true
    _all?: true
  }

  export type ReservationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservation to aggregate.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reservations
    **/
    _count?: true | ReservationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservationMaxAggregateInputType
  }

  export type GetReservationAggregateType<T extends ReservationAggregateArgs> = {
        [P in keyof T & keyof AggregateReservation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReservation[P]>
      : GetScalarType<T[P], AggregateReservation[P]>
  }




  export type ReservationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithAggregationInput | ReservationOrderByWithAggregationInput[]
    by: ReservationScalarFieldEnum[] | ReservationScalarFieldEnum
    having?: ReservationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservationCountAggregateInputType | true
    _avg?: ReservationAvgAggregateInputType
    _sum?: ReservationSumAggregateInputType
    _min?: ReservationMinAggregateInputType
    _max?: ReservationMaxAggregateInputType
  }

  export type ReservationGroupByOutputType = {
    id_de_reservation: number
    id_trajet: number
    id_passager: number
    status: string
    _count: ReservationCountAggregateOutputType | null
    _avg: ReservationAvgAggregateOutputType | null
    _sum: ReservationSumAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  type GetReservationGroupByPayload<T extends ReservationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservationGroupByOutputType[P]>
            : GetScalarType<T[P], ReservationGroupByOutputType[P]>
        }
      >
    >


  export type ReservationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_de_reservation?: boolean
    id_trajet?: boolean
    id_passager?: boolean
    status?: boolean
    passager?: boolean | PassagerDefaultArgs<ExtArgs>
    trajet?: boolean | TrajetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reservation"]>

  export type ReservationSelectScalar = {
    id_de_reservation?: boolean
    id_trajet?: boolean
    id_passager?: boolean
    status?: boolean
  }

  export type ReservationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passager?: boolean | PassagerDefaultArgs<ExtArgs>
    trajet?: boolean | TrajetDefaultArgs<ExtArgs>
  }


  export type $ReservationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reservation"
    objects: {
      passager: Prisma.$PassagerPayload<ExtArgs>
      trajet: Prisma.$TrajetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_de_reservation: number
      id_trajet: number
      id_passager: number
      status: string
    }, ExtArgs["result"]["reservation"]>
    composites: {}
  }


  type ReservationGetPayload<S extends boolean | null | undefined | ReservationDefaultArgs> = $Result.GetResult<Prisma.$ReservationPayload, S>

  type ReservationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReservationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReservationCountAggregateInputType | true
    }

  export interface ReservationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reservation'], meta: { name: 'Reservation' } }
    /**
     * Find zero or one Reservation that matches the filter.
     * @param {ReservationFindUniqueArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReservationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationFindUniqueArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reservation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReservationFindUniqueOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReservationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reservation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReservationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindFirstArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reservation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReservationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reservations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservations
     * const reservations = await prisma.reservation.findMany()
     * 
     * // Get first 10 Reservations
     * const reservations = await prisma.reservation.findMany({ take: 10 })
     * 
     * // Only select the `id_de_reservation`
     * const reservationWithId_de_reservationOnly = await prisma.reservation.findMany({ select: { id_de_reservation: true } })
     * 
    **/
    findMany<T extends ReservationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reservation.
     * @param {ReservationCreateArgs} args - Arguments to create a Reservation.
     * @example
     * // Create one Reservation
     * const Reservation = await prisma.reservation.create({
     *   data: {
     *     // ... data to create a Reservation
     *   }
     * })
     * 
    **/
    create<T extends ReservationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationCreateArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reservations.
     *     @param {ReservationCreateManyArgs} args - Arguments to create many Reservations.
     *     @example
     *     // Create many Reservations
     *     const reservation = await prisma.reservation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReservationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reservation.
     * @param {ReservationDeleteArgs} args - Arguments to delete one Reservation.
     * @example
     * // Delete one Reservation
     * const Reservation = await prisma.reservation.delete({
     *   where: {
     *     // ... filter to delete one Reservation
     *   }
     * })
     * 
    **/
    delete<T extends ReservationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationDeleteArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reservation.
     * @param {ReservationUpdateArgs} args - Arguments to update one Reservation.
     * @example
     * // Update one Reservation
     * const reservation = await prisma.reservation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReservationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationUpdateArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reservations.
     * @param {ReservationDeleteManyArgs} args - Arguments to filter Reservations to delete.
     * @example
     * // Delete a few Reservations
     * const { count } = await prisma.reservation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReservationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservations
     * const reservation = await prisma.reservation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReservationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reservation.
     * @param {ReservationUpsertArgs} args - Arguments to update or create a Reservation.
     * @example
     * // Update or create a Reservation
     * const reservation = await prisma.reservation.upsert({
     *   create: {
     *     // ... data to create a Reservation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reservation we want to update
     *   }
     * })
    **/
    upsert<T extends ReservationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationUpsertArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationCountArgs} args - Arguments to filter Reservations to count.
     * @example
     * // Count the number of Reservations
     * const count = await prisma.reservation.count({
     *   where: {
     *     // ... the filter for the Reservations we want to count
     *   }
     * })
    **/
    count<T extends ReservationCountArgs>(
      args?: Subset<T, ReservationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservationAggregateArgs>(args: Subset<T, ReservationAggregateArgs>): Prisma.PrismaPromise<GetReservationAggregateType<T>>

    /**
     * Group by Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReservationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReservationGroupByArgs['orderBy'] }
        : { orderBy?: ReservationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReservationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reservation model
   */
  readonly fields: ReservationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reservation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReservationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    passager<T extends PassagerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PassagerDefaultArgs<ExtArgs>>): Prisma__PassagerClient<$Result.GetResult<Prisma.$PassagerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    trajet<T extends TrajetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TrajetDefaultArgs<ExtArgs>>): Prisma__TrajetClient<$Result.GetResult<Prisma.$TrajetPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reservation model
   */ 
  interface ReservationFieldRefs {
    readonly id_de_reservation: FieldRef<"Reservation", 'Int'>
    readonly id_trajet: FieldRef<"Reservation", 'Int'>
    readonly id_passager: FieldRef<"Reservation", 'Int'>
    readonly status: FieldRef<"Reservation", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Reservation findUnique
   */
  export type ReservationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation findUniqueOrThrow
   */
  export type ReservationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation findFirst
   */
  export type ReservationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Reservation findFirstOrThrow
   */
  export type ReservationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Reservation findMany
   */
  export type ReservationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservations to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Reservation create
   */
  export type ReservationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to create a Reservation.
     */
    data: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
  }


  /**
   * Reservation createMany
   */
  export type ReservationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reservations.
     */
    data: ReservationCreateManyInput | ReservationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Reservation update
   */
  export type ReservationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to update a Reservation.
     */
    data: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
    /**
     * Choose, which Reservation to update.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation updateMany
   */
  export type ReservationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reservations.
     */
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyInput>
    /**
     * Filter which Reservations to update
     */
    where?: ReservationWhereInput
  }


  /**
   * Reservation upsert
   */
  export type ReservationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The filter to search for the Reservation to update in case it exists.
     */
    where: ReservationWhereUniqueInput
    /**
     * In case the Reservation found by the `where` argument doesn't exist, create a new Reservation with this data.
     */
    create: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
    /**
     * In case the Reservation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
  }


  /**
   * Reservation delete
   */
  export type ReservationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter which Reservation to delete.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation deleteMany
   */
  export type ReservationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservations to delete
     */
    where?: ReservationWhereInput
  }


  /**
   * Reservation without action
   */
  export type ReservationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
  }



  /**
   * Model Conducteur
   */

  export type AggregateConducteur = {
    _count: ConducteurCountAggregateOutputType | null
    _avg: ConducteurAvgAggregateOutputType | null
    _sum: ConducteurSumAggregateOutputType | null
    _min: ConducteurMinAggregateOutputType | null
    _max: ConducteurMaxAggregateOutputType | null
  }

  export type ConducteurAvgAggregateOutputType = {
    id_conducteur: number | null
    nombre_de_place_disponible: number | null
  }

  export type ConducteurSumAggregateOutputType = {
    id_conducteur: number | null
    nombre_de_place_disponible: number | null
  }

  export type ConducteurMinAggregateOutputType = {
    id_conducteur: number | null
    nom_conducteur: string | null
    prenom_conducteur: string | null
    numero_de_telephone: string | null
    modele_du_vehicule: string | null
    nombre_de_place_disponible: number | null
    photo_conducteur: string | null
    photo_du_permis_de_conduire: string | null
    carte_crise_et_d_assurance: string | null
  }

  export type ConducteurMaxAggregateOutputType = {
    id_conducteur: number | null
    nom_conducteur: string | null
    prenom_conducteur: string | null
    numero_de_telephone: string | null
    modele_du_vehicule: string | null
    nombre_de_place_disponible: number | null
    photo_conducteur: string | null
    photo_du_permis_de_conduire: string | null
    carte_crise_et_d_assurance: string | null
  }

  export type ConducteurCountAggregateOutputType = {
    id_conducteur: number
    nom_conducteur: number
    prenom_conducteur: number
    numero_de_telephone: number
    modele_du_vehicule: number
    nombre_de_place_disponible: number
    photo_conducteur: number
    photo_du_permis_de_conduire: number
    carte_crise_et_d_assurance: number
    _all: number
  }


  export type ConducteurAvgAggregateInputType = {
    id_conducteur?: true
    nombre_de_place_disponible?: true
  }

  export type ConducteurSumAggregateInputType = {
    id_conducteur?: true
    nombre_de_place_disponible?: true
  }

  export type ConducteurMinAggregateInputType = {
    id_conducteur?: true
    nom_conducteur?: true
    prenom_conducteur?: true
    numero_de_telephone?: true
    modele_du_vehicule?: true
    nombre_de_place_disponible?: true
    photo_conducteur?: true
    photo_du_permis_de_conduire?: true
    carte_crise_et_d_assurance?: true
  }

  export type ConducteurMaxAggregateInputType = {
    id_conducteur?: true
    nom_conducteur?: true
    prenom_conducteur?: true
    numero_de_telephone?: true
    modele_du_vehicule?: true
    nombre_de_place_disponible?: true
    photo_conducteur?: true
    photo_du_permis_de_conduire?: true
    carte_crise_et_d_assurance?: true
  }

  export type ConducteurCountAggregateInputType = {
    id_conducteur?: true
    nom_conducteur?: true
    prenom_conducteur?: true
    numero_de_telephone?: true
    modele_du_vehicule?: true
    nombre_de_place_disponible?: true
    photo_conducteur?: true
    photo_du_permis_de_conduire?: true
    carte_crise_et_d_assurance?: true
    _all?: true
  }

  export type ConducteurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conducteur to aggregate.
     */
    where?: ConducteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conducteurs to fetch.
     */
    orderBy?: ConducteurOrderByWithRelationInput | ConducteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConducteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conducteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conducteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conducteurs
    **/
    _count?: true | ConducteurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConducteurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConducteurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConducteurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConducteurMaxAggregateInputType
  }

  export type GetConducteurAggregateType<T extends ConducteurAggregateArgs> = {
        [P in keyof T & keyof AggregateConducteur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConducteur[P]>
      : GetScalarType<T[P], AggregateConducteur[P]>
  }




  export type ConducteurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConducteurWhereInput
    orderBy?: ConducteurOrderByWithAggregationInput | ConducteurOrderByWithAggregationInput[]
    by: ConducteurScalarFieldEnum[] | ConducteurScalarFieldEnum
    having?: ConducteurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConducteurCountAggregateInputType | true
    _avg?: ConducteurAvgAggregateInputType
    _sum?: ConducteurSumAggregateInputType
    _min?: ConducteurMinAggregateInputType
    _max?: ConducteurMaxAggregateInputType
  }

  export type ConducteurGroupByOutputType = {
    id_conducteur: number
    nom_conducteur: string
    prenom_conducteur: string
    numero_de_telephone: string
    modele_du_vehicule: string
    nombre_de_place_disponible: number
    photo_conducteur: string
    photo_du_permis_de_conduire: string
    carte_crise_et_d_assurance: string
    _count: ConducteurCountAggregateOutputType | null
    _avg: ConducteurAvgAggregateOutputType | null
    _sum: ConducteurSumAggregateOutputType | null
    _min: ConducteurMinAggregateOutputType | null
    _max: ConducteurMaxAggregateOutputType | null
  }

  type GetConducteurGroupByPayload<T extends ConducteurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConducteurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConducteurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConducteurGroupByOutputType[P]>
            : GetScalarType<T[P], ConducteurGroupByOutputType[P]>
        }
      >
    >


  export type ConducteurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_conducteur?: boolean
    nom_conducteur?: boolean
    prenom_conducteur?: boolean
    numero_de_telephone?: boolean
    modele_du_vehicule?: boolean
    nombre_de_place_disponible?: boolean
    photo_conducteur?: boolean
    photo_du_permis_de_conduire?: boolean
    carte_crise_et_d_assurance?: boolean
    trajets?: boolean | Conducteur$trajetsArgs<ExtArgs>
    _count?: boolean | ConducteurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conducteur"]>

  export type ConducteurSelectScalar = {
    id_conducteur?: boolean
    nom_conducteur?: boolean
    prenom_conducteur?: boolean
    numero_de_telephone?: boolean
    modele_du_vehicule?: boolean
    nombre_de_place_disponible?: boolean
    photo_conducteur?: boolean
    photo_du_permis_de_conduire?: boolean
    carte_crise_et_d_assurance?: boolean
  }

  export type ConducteurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trajets?: boolean | Conducteur$trajetsArgs<ExtArgs>
    _count?: boolean | ConducteurCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ConducteurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Conducteur"
    objects: {
      trajets: Prisma.$TrajetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_conducteur: number
      nom_conducteur: string
      prenom_conducteur: string
      numero_de_telephone: string
      modele_du_vehicule: string
      nombre_de_place_disponible: number
      photo_conducteur: string
      photo_du_permis_de_conduire: string
      carte_crise_et_d_assurance: string
    }, ExtArgs["result"]["conducteur"]>
    composites: {}
  }


  type ConducteurGetPayload<S extends boolean | null | undefined | ConducteurDefaultArgs> = $Result.GetResult<Prisma.$ConducteurPayload, S>

  type ConducteurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConducteurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConducteurCountAggregateInputType | true
    }

  export interface ConducteurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Conducteur'], meta: { name: 'Conducteur' } }
    /**
     * Find zero or one Conducteur that matches the filter.
     * @param {ConducteurFindUniqueArgs} args - Arguments to find a Conducteur
     * @example
     * // Get one Conducteur
     * const conducteur = await prisma.conducteur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConducteurFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ConducteurFindUniqueArgs<ExtArgs>>
    ): Prisma__ConducteurClient<$Result.GetResult<Prisma.$ConducteurPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Conducteur that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ConducteurFindUniqueOrThrowArgs} args - Arguments to find a Conducteur
     * @example
     * // Get one Conducteur
     * const conducteur = await prisma.conducteur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ConducteurFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConducteurFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ConducteurClient<$Result.GetResult<Prisma.$ConducteurPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Conducteur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConducteurFindFirstArgs} args - Arguments to find a Conducteur
     * @example
     * // Get one Conducteur
     * const conducteur = await prisma.conducteur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConducteurFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ConducteurFindFirstArgs<ExtArgs>>
    ): Prisma__ConducteurClient<$Result.GetResult<Prisma.$ConducteurPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Conducteur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConducteurFindFirstOrThrowArgs} args - Arguments to find a Conducteur
     * @example
     * // Get one Conducteur
     * const conducteur = await prisma.conducteur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ConducteurFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConducteurFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ConducteurClient<$Result.GetResult<Prisma.$ConducteurPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Conducteurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConducteurFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conducteurs
     * const conducteurs = await prisma.conducteur.findMany()
     * 
     * // Get first 10 Conducteurs
     * const conducteurs = await prisma.conducteur.findMany({ take: 10 })
     * 
     * // Only select the `id_conducteur`
     * const conducteurWithId_conducteurOnly = await prisma.conducteur.findMany({ select: { id_conducteur: true } })
     * 
    **/
    findMany<T extends ConducteurFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConducteurFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConducteurPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Conducteur.
     * @param {ConducteurCreateArgs} args - Arguments to create a Conducteur.
     * @example
     * // Create one Conducteur
     * const Conducteur = await prisma.conducteur.create({
     *   data: {
     *     // ... data to create a Conducteur
     *   }
     * })
     * 
    **/
    create<T extends ConducteurCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ConducteurCreateArgs<ExtArgs>>
    ): Prisma__ConducteurClient<$Result.GetResult<Prisma.$ConducteurPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Conducteurs.
     *     @param {ConducteurCreateManyArgs} args - Arguments to create many Conducteurs.
     *     @example
     *     // Create many Conducteurs
     *     const conducteur = await prisma.conducteur.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ConducteurCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConducteurCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Conducteur.
     * @param {ConducteurDeleteArgs} args - Arguments to delete one Conducteur.
     * @example
     * // Delete one Conducteur
     * const Conducteur = await prisma.conducteur.delete({
     *   where: {
     *     // ... filter to delete one Conducteur
     *   }
     * })
     * 
    **/
    delete<T extends ConducteurDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ConducteurDeleteArgs<ExtArgs>>
    ): Prisma__ConducteurClient<$Result.GetResult<Prisma.$ConducteurPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Conducteur.
     * @param {ConducteurUpdateArgs} args - Arguments to update one Conducteur.
     * @example
     * // Update one Conducteur
     * const conducteur = await prisma.conducteur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConducteurUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ConducteurUpdateArgs<ExtArgs>>
    ): Prisma__ConducteurClient<$Result.GetResult<Prisma.$ConducteurPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Conducteurs.
     * @param {ConducteurDeleteManyArgs} args - Arguments to filter Conducteurs to delete.
     * @example
     * // Delete a few Conducteurs
     * const { count } = await prisma.conducteur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConducteurDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConducteurDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conducteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConducteurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conducteurs
     * const conducteur = await prisma.conducteur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConducteurUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ConducteurUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Conducteur.
     * @param {ConducteurUpsertArgs} args - Arguments to update or create a Conducteur.
     * @example
     * // Update or create a Conducteur
     * const conducteur = await prisma.conducteur.upsert({
     *   create: {
     *     // ... data to create a Conducteur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conducteur we want to update
     *   }
     * })
    **/
    upsert<T extends ConducteurUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ConducteurUpsertArgs<ExtArgs>>
    ): Prisma__ConducteurClient<$Result.GetResult<Prisma.$ConducteurPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Conducteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConducteurCountArgs} args - Arguments to filter Conducteurs to count.
     * @example
     * // Count the number of Conducteurs
     * const count = await prisma.conducteur.count({
     *   where: {
     *     // ... the filter for the Conducteurs we want to count
     *   }
     * })
    **/
    count<T extends ConducteurCountArgs>(
      args?: Subset<T, ConducteurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConducteurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conducteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConducteurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConducteurAggregateArgs>(args: Subset<T, ConducteurAggregateArgs>): Prisma.PrismaPromise<GetConducteurAggregateType<T>>

    /**
     * Group by Conducteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConducteurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConducteurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConducteurGroupByArgs['orderBy'] }
        : { orderBy?: ConducteurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConducteurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConducteurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Conducteur model
   */
  readonly fields: ConducteurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conducteur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConducteurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    trajets<T extends Conducteur$trajetsArgs<ExtArgs> = {}>(args?: Subset<T, Conducteur$trajetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrajetPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Conducteur model
   */ 
  interface ConducteurFieldRefs {
    readonly id_conducteur: FieldRef<"Conducteur", 'Int'>
    readonly nom_conducteur: FieldRef<"Conducteur", 'String'>
    readonly prenom_conducteur: FieldRef<"Conducteur", 'String'>
    readonly numero_de_telephone: FieldRef<"Conducteur", 'String'>
    readonly modele_du_vehicule: FieldRef<"Conducteur", 'String'>
    readonly nombre_de_place_disponible: FieldRef<"Conducteur", 'Int'>
    readonly photo_conducteur: FieldRef<"Conducteur", 'String'>
    readonly photo_du_permis_de_conduire: FieldRef<"Conducteur", 'String'>
    readonly carte_crise_et_d_assurance: FieldRef<"Conducteur", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Conducteur findUnique
   */
  export type ConducteurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conducteur
     */
    select?: ConducteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConducteurInclude<ExtArgs> | null
    /**
     * Filter, which Conducteur to fetch.
     */
    where: ConducteurWhereUniqueInput
  }


  /**
   * Conducteur findUniqueOrThrow
   */
  export type ConducteurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conducteur
     */
    select?: ConducteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConducteurInclude<ExtArgs> | null
    /**
     * Filter, which Conducteur to fetch.
     */
    where: ConducteurWhereUniqueInput
  }


  /**
   * Conducteur findFirst
   */
  export type ConducteurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conducteur
     */
    select?: ConducteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConducteurInclude<ExtArgs> | null
    /**
     * Filter, which Conducteur to fetch.
     */
    where?: ConducteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conducteurs to fetch.
     */
    orderBy?: ConducteurOrderByWithRelationInput | ConducteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conducteurs.
     */
    cursor?: ConducteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conducteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conducteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conducteurs.
     */
    distinct?: ConducteurScalarFieldEnum | ConducteurScalarFieldEnum[]
  }


  /**
   * Conducteur findFirstOrThrow
   */
  export type ConducteurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conducteur
     */
    select?: ConducteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConducteurInclude<ExtArgs> | null
    /**
     * Filter, which Conducteur to fetch.
     */
    where?: ConducteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conducteurs to fetch.
     */
    orderBy?: ConducteurOrderByWithRelationInput | ConducteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conducteurs.
     */
    cursor?: ConducteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conducteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conducteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conducteurs.
     */
    distinct?: ConducteurScalarFieldEnum | ConducteurScalarFieldEnum[]
  }


  /**
   * Conducteur findMany
   */
  export type ConducteurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conducteur
     */
    select?: ConducteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConducteurInclude<ExtArgs> | null
    /**
     * Filter, which Conducteurs to fetch.
     */
    where?: ConducteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conducteurs to fetch.
     */
    orderBy?: ConducteurOrderByWithRelationInput | ConducteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conducteurs.
     */
    cursor?: ConducteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conducteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conducteurs.
     */
    skip?: number
    distinct?: ConducteurScalarFieldEnum | ConducteurScalarFieldEnum[]
  }


  /**
   * Conducteur create
   */
  export type ConducteurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conducteur
     */
    select?: ConducteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConducteurInclude<ExtArgs> | null
    /**
     * The data needed to create a Conducteur.
     */
    data: XOR<ConducteurCreateInput, ConducteurUncheckedCreateInput>
  }


  /**
   * Conducteur createMany
   */
  export type ConducteurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Conducteurs.
     */
    data: ConducteurCreateManyInput | ConducteurCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Conducteur update
   */
  export type ConducteurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conducteur
     */
    select?: ConducteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConducteurInclude<ExtArgs> | null
    /**
     * The data needed to update a Conducteur.
     */
    data: XOR<ConducteurUpdateInput, ConducteurUncheckedUpdateInput>
    /**
     * Choose, which Conducteur to update.
     */
    where: ConducteurWhereUniqueInput
  }


  /**
   * Conducteur updateMany
   */
  export type ConducteurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conducteurs.
     */
    data: XOR<ConducteurUpdateManyMutationInput, ConducteurUncheckedUpdateManyInput>
    /**
     * Filter which Conducteurs to update
     */
    where?: ConducteurWhereInput
  }


  /**
   * Conducteur upsert
   */
  export type ConducteurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conducteur
     */
    select?: ConducteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConducteurInclude<ExtArgs> | null
    /**
     * The filter to search for the Conducteur to update in case it exists.
     */
    where: ConducteurWhereUniqueInput
    /**
     * In case the Conducteur found by the `where` argument doesn't exist, create a new Conducteur with this data.
     */
    create: XOR<ConducteurCreateInput, ConducteurUncheckedCreateInput>
    /**
     * In case the Conducteur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConducteurUpdateInput, ConducteurUncheckedUpdateInput>
  }


  /**
   * Conducteur delete
   */
  export type ConducteurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conducteur
     */
    select?: ConducteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConducteurInclude<ExtArgs> | null
    /**
     * Filter which Conducteur to delete.
     */
    where: ConducteurWhereUniqueInput
  }


  /**
   * Conducteur deleteMany
   */
  export type ConducteurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conducteurs to delete
     */
    where?: ConducteurWhereInput
  }


  /**
   * Conducteur.trajets
   */
  export type Conducteur$trajetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trajet
     */
    select?: TrajetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrajetInclude<ExtArgs> | null
    where?: TrajetWhereInput
    orderBy?: TrajetOrderByWithRelationInput | TrajetOrderByWithRelationInput[]
    cursor?: TrajetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrajetScalarFieldEnum | TrajetScalarFieldEnum[]
  }


  /**
   * Conducteur without action
   */
  export type ConducteurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conducteur
     */
    select?: ConducteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConducteurInclude<ExtArgs> | null
  }



  /**
   * Model Trajet
   */

  export type AggregateTrajet = {
    _count: TrajetCountAggregateOutputType | null
    _avg: TrajetAvgAggregateOutputType | null
    _sum: TrajetSumAggregateOutputType | null
    _min: TrajetMinAggregateOutputType | null
    _max: TrajetMaxAggregateOutputType | null
  }

  export type TrajetAvgAggregateOutputType = {
    id_trajet: number | null
    id_du_conducteur: number | null
    prix_du_trajet: number | null
  }

  export type TrajetSumAggregateOutputType = {
    id_trajet: number | null
    id_du_conducteur: number | null
    prix_du_trajet: number | null
  }

  export type TrajetMinAggregateOutputType = {
    id_trajet: number | null
    id_du_conducteur: number | null
    destination_d_arrivee: string | null
    destination_depart: string | null
    heure_de_depart: Date | null
    heure_d_arrivee: Date | null
    prix_du_trajet: number | null
  }

  export type TrajetMaxAggregateOutputType = {
    id_trajet: number | null
    id_du_conducteur: number | null
    destination_d_arrivee: string | null
    destination_depart: string | null
    heure_de_depart: Date | null
    heure_d_arrivee: Date | null
    prix_du_trajet: number | null
  }

  export type TrajetCountAggregateOutputType = {
    id_trajet: number
    id_du_conducteur: number
    destination_d_arrivee: number
    destination_depart: number
    heure_de_depart: number
    heure_d_arrivee: number
    prix_du_trajet: number
    _all: number
  }


  export type TrajetAvgAggregateInputType = {
    id_trajet?: true
    id_du_conducteur?: true
    prix_du_trajet?: true
  }

  export type TrajetSumAggregateInputType = {
    id_trajet?: true
    id_du_conducteur?: true
    prix_du_trajet?: true
  }

  export type TrajetMinAggregateInputType = {
    id_trajet?: true
    id_du_conducteur?: true
    destination_d_arrivee?: true
    destination_depart?: true
    heure_de_depart?: true
    heure_d_arrivee?: true
    prix_du_trajet?: true
  }

  export type TrajetMaxAggregateInputType = {
    id_trajet?: true
    id_du_conducteur?: true
    destination_d_arrivee?: true
    destination_depart?: true
    heure_de_depart?: true
    heure_d_arrivee?: true
    prix_du_trajet?: true
  }

  export type TrajetCountAggregateInputType = {
    id_trajet?: true
    id_du_conducteur?: true
    destination_d_arrivee?: true
    destination_depart?: true
    heure_de_depart?: true
    heure_d_arrivee?: true
    prix_du_trajet?: true
    _all?: true
  }

  export type TrajetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trajet to aggregate.
     */
    where?: TrajetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trajets to fetch.
     */
    orderBy?: TrajetOrderByWithRelationInput | TrajetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrajetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trajets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trajets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trajets
    **/
    _count?: true | TrajetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrajetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrajetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrajetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrajetMaxAggregateInputType
  }

  export type GetTrajetAggregateType<T extends TrajetAggregateArgs> = {
        [P in keyof T & keyof AggregateTrajet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrajet[P]>
      : GetScalarType<T[P], AggregateTrajet[P]>
  }




  export type TrajetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrajetWhereInput
    orderBy?: TrajetOrderByWithAggregationInput | TrajetOrderByWithAggregationInput[]
    by: TrajetScalarFieldEnum[] | TrajetScalarFieldEnum
    having?: TrajetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrajetCountAggregateInputType | true
    _avg?: TrajetAvgAggregateInputType
    _sum?: TrajetSumAggregateInputType
    _min?: TrajetMinAggregateInputType
    _max?: TrajetMaxAggregateInputType
  }

  export type TrajetGroupByOutputType = {
    id_trajet: number
    id_du_conducteur: number
    destination_d_arrivee: string
    destination_depart: string
    heure_de_depart: Date
    heure_d_arrivee: Date
    prix_du_trajet: number
    _count: TrajetCountAggregateOutputType | null
    _avg: TrajetAvgAggregateOutputType | null
    _sum: TrajetSumAggregateOutputType | null
    _min: TrajetMinAggregateOutputType | null
    _max: TrajetMaxAggregateOutputType | null
  }

  type GetTrajetGroupByPayload<T extends TrajetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrajetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrajetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrajetGroupByOutputType[P]>
            : GetScalarType<T[P], TrajetGroupByOutputType[P]>
        }
      >
    >


  export type TrajetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_trajet?: boolean
    id_du_conducteur?: boolean
    destination_d_arrivee?: boolean
    destination_depart?: boolean
    heure_de_depart?: boolean
    heure_d_arrivee?: boolean
    prix_du_trajet?: boolean
    conducteur?: boolean | ConducteurDefaultArgs<ExtArgs>
    reservations?: boolean | Trajet$reservationsArgs<ExtArgs>
    _count?: boolean | TrajetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trajet"]>

  export type TrajetSelectScalar = {
    id_trajet?: boolean
    id_du_conducteur?: boolean
    destination_d_arrivee?: boolean
    destination_depart?: boolean
    heure_de_depart?: boolean
    heure_d_arrivee?: boolean
    prix_du_trajet?: boolean
  }

  export type TrajetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conducteur?: boolean | ConducteurDefaultArgs<ExtArgs>
    reservations?: boolean | Trajet$reservationsArgs<ExtArgs>
    _count?: boolean | TrajetCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TrajetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Trajet"
    objects: {
      conducteur: Prisma.$ConducteurPayload<ExtArgs>
      reservations: Prisma.$ReservationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_trajet: number
      id_du_conducteur: number
      destination_d_arrivee: string
      destination_depart: string
      heure_de_depart: Date
      heure_d_arrivee: Date
      prix_du_trajet: number
    }, ExtArgs["result"]["trajet"]>
    composites: {}
  }


  type TrajetGetPayload<S extends boolean | null | undefined | TrajetDefaultArgs> = $Result.GetResult<Prisma.$TrajetPayload, S>

  type TrajetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TrajetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TrajetCountAggregateInputType | true
    }

  export interface TrajetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Trajet'], meta: { name: 'Trajet' } }
    /**
     * Find zero or one Trajet that matches the filter.
     * @param {TrajetFindUniqueArgs} args - Arguments to find a Trajet
     * @example
     * // Get one Trajet
     * const trajet = await prisma.trajet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TrajetFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TrajetFindUniqueArgs<ExtArgs>>
    ): Prisma__TrajetClient<$Result.GetResult<Prisma.$TrajetPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Trajet that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TrajetFindUniqueOrThrowArgs} args - Arguments to find a Trajet
     * @example
     * // Get one Trajet
     * const trajet = await prisma.trajet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TrajetFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TrajetFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TrajetClient<$Result.GetResult<Prisma.$TrajetPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Trajet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrajetFindFirstArgs} args - Arguments to find a Trajet
     * @example
     * // Get one Trajet
     * const trajet = await prisma.trajet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TrajetFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TrajetFindFirstArgs<ExtArgs>>
    ): Prisma__TrajetClient<$Result.GetResult<Prisma.$TrajetPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Trajet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrajetFindFirstOrThrowArgs} args - Arguments to find a Trajet
     * @example
     * // Get one Trajet
     * const trajet = await prisma.trajet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TrajetFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TrajetFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TrajetClient<$Result.GetResult<Prisma.$TrajetPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Trajets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrajetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trajets
     * const trajets = await prisma.trajet.findMany()
     * 
     * // Get first 10 Trajets
     * const trajets = await prisma.trajet.findMany({ take: 10 })
     * 
     * // Only select the `id_trajet`
     * const trajetWithId_trajetOnly = await prisma.trajet.findMany({ select: { id_trajet: true } })
     * 
    **/
    findMany<T extends TrajetFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TrajetFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrajetPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Trajet.
     * @param {TrajetCreateArgs} args - Arguments to create a Trajet.
     * @example
     * // Create one Trajet
     * const Trajet = await prisma.trajet.create({
     *   data: {
     *     // ... data to create a Trajet
     *   }
     * })
     * 
    **/
    create<T extends TrajetCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TrajetCreateArgs<ExtArgs>>
    ): Prisma__TrajetClient<$Result.GetResult<Prisma.$TrajetPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Trajets.
     *     @param {TrajetCreateManyArgs} args - Arguments to create many Trajets.
     *     @example
     *     // Create many Trajets
     *     const trajet = await prisma.trajet.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TrajetCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TrajetCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Trajet.
     * @param {TrajetDeleteArgs} args - Arguments to delete one Trajet.
     * @example
     * // Delete one Trajet
     * const Trajet = await prisma.trajet.delete({
     *   where: {
     *     // ... filter to delete one Trajet
     *   }
     * })
     * 
    **/
    delete<T extends TrajetDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TrajetDeleteArgs<ExtArgs>>
    ): Prisma__TrajetClient<$Result.GetResult<Prisma.$TrajetPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Trajet.
     * @param {TrajetUpdateArgs} args - Arguments to update one Trajet.
     * @example
     * // Update one Trajet
     * const trajet = await prisma.trajet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TrajetUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TrajetUpdateArgs<ExtArgs>>
    ): Prisma__TrajetClient<$Result.GetResult<Prisma.$TrajetPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Trajets.
     * @param {TrajetDeleteManyArgs} args - Arguments to filter Trajets to delete.
     * @example
     * // Delete a few Trajets
     * const { count } = await prisma.trajet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TrajetDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TrajetDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trajets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrajetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trajets
     * const trajet = await prisma.trajet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TrajetUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TrajetUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trajet.
     * @param {TrajetUpsertArgs} args - Arguments to update or create a Trajet.
     * @example
     * // Update or create a Trajet
     * const trajet = await prisma.trajet.upsert({
     *   create: {
     *     // ... data to create a Trajet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trajet we want to update
     *   }
     * })
    **/
    upsert<T extends TrajetUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TrajetUpsertArgs<ExtArgs>>
    ): Prisma__TrajetClient<$Result.GetResult<Prisma.$TrajetPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Trajets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrajetCountArgs} args - Arguments to filter Trajets to count.
     * @example
     * // Count the number of Trajets
     * const count = await prisma.trajet.count({
     *   where: {
     *     // ... the filter for the Trajets we want to count
     *   }
     * })
    **/
    count<T extends TrajetCountArgs>(
      args?: Subset<T, TrajetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrajetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trajet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrajetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrajetAggregateArgs>(args: Subset<T, TrajetAggregateArgs>): Prisma.PrismaPromise<GetTrajetAggregateType<T>>

    /**
     * Group by Trajet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrajetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrajetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrajetGroupByArgs['orderBy'] }
        : { orderBy?: TrajetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrajetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrajetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Trajet model
   */
  readonly fields: TrajetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Trajet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrajetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    conducteur<T extends ConducteurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConducteurDefaultArgs<ExtArgs>>): Prisma__ConducteurClient<$Result.GetResult<Prisma.$ConducteurPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    reservations<T extends Trajet$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, Trajet$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Trajet model
   */ 
  interface TrajetFieldRefs {
    readonly id_trajet: FieldRef<"Trajet", 'Int'>
    readonly id_du_conducteur: FieldRef<"Trajet", 'Int'>
    readonly destination_d_arrivee: FieldRef<"Trajet", 'String'>
    readonly destination_depart: FieldRef<"Trajet", 'String'>
    readonly heure_de_depart: FieldRef<"Trajet", 'DateTime'>
    readonly heure_d_arrivee: FieldRef<"Trajet", 'DateTime'>
    readonly prix_du_trajet: FieldRef<"Trajet", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * Trajet findUnique
   */
  export type TrajetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trajet
     */
    select?: TrajetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrajetInclude<ExtArgs> | null
    /**
     * Filter, which Trajet to fetch.
     */
    where: TrajetWhereUniqueInput
  }


  /**
   * Trajet findUniqueOrThrow
   */
  export type TrajetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trajet
     */
    select?: TrajetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrajetInclude<ExtArgs> | null
    /**
     * Filter, which Trajet to fetch.
     */
    where: TrajetWhereUniqueInput
  }


  /**
   * Trajet findFirst
   */
  export type TrajetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trajet
     */
    select?: TrajetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrajetInclude<ExtArgs> | null
    /**
     * Filter, which Trajet to fetch.
     */
    where?: TrajetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trajets to fetch.
     */
    orderBy?: TrajetOrderByWithRelationInput | TrajetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trajets.
     */
    cursor?: TrajetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trajets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trajets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trajets.
     */
    distinct?: TrajetScalarFieldEnum | TrajetScalarFieldEnum[]
  }


  /**
   * Trajet findFirstOrThrow
   */
  export type TrajetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trajet
     */
    select?: TrajetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrajetInclude<ExtArgs> | null
    /**
     * Filter, which Trajet to fetch.
     */
    where?: TrajetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trajets to fetch.
     */
    orderBy?: TrajetOrderByWithRelationInput | TrajetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trajets.
     */
    cursor?: TrajetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trajets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trajets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trajets.
     */
    distinct?: TrajetScalarFieldEnum | TrajetScalarFieldEnum[]
  }


  /**
   * Trajet findMany
   */
  export type TrajetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trajet
     */
    select?: TrajetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrajetInclude<ExtArgs> | null
    /**
     * Filter, which Trajets to fetch.
     */
    where?: TrajetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trajets to fetch.
     */
    orderBy?: TrajetOrderByWithRelationInput | TrajetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trajets.
     */
    cursor?: TrajetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trajets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trajets.
     */
    skip?: number
    distinct?: TrajetScalarFieldEnum | TrajetScalarFieldEnum[]
  }


  /**
   * Trajet create
   */
  export type TrajetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trajet
     */
    select?: TrajetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrajetInclude<ExtArgs> | null
    /**
     * The data needed to create a Trajet.
     */
    data: XOR<TrajetCreateInput, TrajetUncheckedCreateInput>
  }


  /**
   * Trajet createMany
   */
  export type TrajetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trajets.
     */
    data: TrajetCreateManyInput | TrajetCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Trajet update
   */
  export type TrajetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trajet
     */
    select?: TrajetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrajetInclude<ExtArgs> | null
    /**
     * The data needed to update a Trajet.
     */
    data: XOR<TrajetUpdateInput, TrajetUncheckedUpdateInput>
    /**
     * Choose, which Trajet to update.
     */
    where: TrajetWhereUniqueInput
  }


  /**
   * Trajet updateMany
   */
  export type TrajetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trajets.
     */
    data: XOR<TrajetUpdateManyMutationInput, TrajetUncheckedUpdateManyInput>
    /**
     * Filter which Trajets to update
     */
    where?: TrajetWhereInput
  }


  /**
   * Trajet upsert
   */
  export type TrajetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trajet
     */
    select?: TrajetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrajetInclude<ExtArgs> | null
    /**
     * The filter to search for the Trajet to update in case it exists.
     */
    where: TrajetWhereUniqueInput
    /**
     * In case the Trajet found by the `where` argument doesn't exist, create a new Trajet with this data.
     */
    create: XOR<TrajetCreateInput, TrajetUncheckedCreateInput>
    /**
     * In case the Trajet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrajetUpdateInput, TrajetUncheckedUpdateInput>
  }


  /**
   * Trajet delete
   */
  export type TrajetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trajet
     */
    select?: TrajetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrajetInclude<ExtArgs> | null
    /**
     * Filter which Trajet to delete.
     */
    where: TrajetWhereUniqueInput
  }


  /**
   * Trajet deleteMany
   */
  export type TrajetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trajets to delete
     */
    where?: TrajetWhereInput
  }


  /**
   * Trajet.reservations
   */
  export type Trajet$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    cursor?: ReservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Trajet without action
   */
  export type TrajetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trajet
     */
    select?: TrajetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrajetInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PassagerScalarFieldEnum: {
    id_passager: 'id_passager',
    nom_passager: 'nom_passager',
    prenom_passager: 'prenom_passager',
    numero_de_telephone: 'numero_de_telephone',
    mot_de_passe: 'mot_de_passe',
    photo_passager: 'photo_passager'
  };

  export type PassagerScalarFieldEnum = (typeof PassagerScalarFieldEnum)[keyof typeof PassagerScalarFieldEnum]


  export const ReservationScalarFieldEnum: {
    id_de_reservation: 'id_de_reservation',
    id_trajet: 'id_trajet',
    id_passager: 'id_passager',
    status: 'status'
  };

  export type ReservationScalarFieldEnum = (typeof ReservationScalarFieldEnum)[keyof typeof ReservationScalarFieldEnum]


  export const ConducteurScalarFieldEnum: {
    id_conducteur: 'id_conducteur',
    nom_conducteur: 'nom_conducteur',
    prenom_conducteur: 'prenom_conducteur',
    numero_de_telephone: 'numero_de_telephone',
    modele_du_vehicule: 'modele_du_vehicule',
    nombre_de_place_disponible: 'nombre_de_place_disponible',
    photo_conducteur: 'photo_conducteur',
    photo_du_permis_de_conduire: 'photo_du_permis_de_conduire',
    carte_crise_et_d_assurance: 'carte_crise_et_d_assurance'
  };

  export type ConducteurScalarFieldEnum = (typeof ConducteurScalarFieldEnum)[keyof typeof ConducteurScalarFieldEnum]


  export const TrajetScalarFieldEnum: {
    id_trajet: 'id_trajet',
    id_du_conducteur: 'id_du_conducteur',
    destination_d_arrivee: 'destination_d_arrivee',
    destination_depart: 'destination_depart',
    heure_de_depart: 'heure_de_depart',
    heure_d_arrivee: 'heure_d_arrivee',
    prix_du_trajet: 'prix_du_trajet'
  };

  export type TrajetScalarFieldEnum = (typeof TrajetScalarFieldEnum)[keyof typeof TrajetScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type PassagerWhereInput = {
    AND?: PassagerWhereInput | PassagerWhereInput[]
    OR?: PassagerWhereInput[]
    NOT?: PassagerWhereInput | PassagerWhereInput[]
    id_passager?: IntFilter<"Passager"> | number
    nom_passager?: StringFilter<"Passager"> | string
    prenom_passager?: StringFilter<"Passager"> | string
    numero_de_telephone?: StringFilter<"Passager"> | string
    mot_de_passe?: StringFilter<"Passager"> | string
    photo_passager?: StringFilter<"Passager"> | string
    reservations?: ReservationListRelationFilter
  }

  export type PassagerOrderByWithRelationInput = {
    id_passager?: SortOrder
    nom_passager?: SortOrder
    prenom_passager?: SortOrder
    numero_de_telephone?: SortOrder
    mot_de_passe?: SortOrder
    photo_passager?: SortOrder
    reservations?: ReservationOrderByRelationAggregateInput
  }

  export type PassagerWhereUniqueInput = Prisma.AtLeast<{
    id_passager?: number
    AND?: PassagerWhereInput | PassagerWhereInput[]
    OR?: PassagerWhereInput[]
    NOT?: PassagerWhereInput | PassagerWhereInput[]
    nom_passager?: StringFilter<"Passager"> | string
    prenom_passager?: StringFilter<"Passager"> | string
    numero_de_telephone?: StringFilter<"Passager"> | string
    mot_de_passe?: StringFilter<"Passager"> | string
    photo_passager?: StringFilter<"Passager"> | string
    reservations?: ReservationListRelationFilter
  }, "id_passager">

  export type PassagerOrderByWithAggregationInput = {
    id_passager?: SortOrder
    nom_passager?: SortOrder
    prenom_passager?: SortOrder
    numero_de_telephone?: SortOrder
    mot_de_passe?: SortOrder
    photo_passager?: SortOrder
    _count?: PassagerCountOrderByAggregateInput
    _avg?: PassagerAvgOrderByAggregateInput
    _max?: PassagerMaxOrderByAggregateInput
    _min?: PassagerMinOrderByAggregateInput
    _sum?: PassagerSumOrderByAggregateInput
  }

  export type PassagerScalarWhereWithAggregatesInput = {
    AND?: PassagerScalarWhereWithAggregatesInput | PassagerScalarWhereWithAggregatesInput[]
    OR?: PassagerScalarWhereWithAggregatesInput[]
    NOT?: PassagerScalarWhereWithAggregatesInput | PassagerScalarWhereWithAggregatesInput[]
    id_passager?: IntWithAggregatesFilter<"Passager"> | number
    nom_passager?: StringWithAggregatesFilter<"Passager"> | string
    prenom_passager?: StringWithAggregatesFilter<"Passager"> | string
    numero_de_telephone?: StringWithAggregatesFilter<"Passager"> | string
    mot_de_passe?: StringWithAggregatesFilter<"Passager"> | string
    photo_passager?: StringWithAggregatesFilter<"Passager"> | string
  }

  export type ReservationWhereInput = {
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    id_de_reservation?: IntFilter<"Reservation"> | number
    id_trajet?: IntFilter<"Reservation"> | number
    id_passager?: IntFilter<"Reservation"> | number
    status?: StringFilter<"Reservation"> | string
    passager?: XOR<PassagerRelationFilter, PassagerWhereInput>
    trajet?: XOR<TrajetRelationFilter, TrajetWhereInput>
  }

  export type ReservationOrderByWithRelationInput = {
    id_de_reservation?: SortOrder
    id_trajet?: SortOrder
    id_passager?: SortOrder
    status?: SortOrder
    passager?: PassagerOrderByWithRelationInput
    trajet?: TrajetOrderByWithRelationInput
  }

  export type ReservationWhereUniqueInput = Prisma.AtLeast<{
    id_de_reservation?: number
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    id_trajet?: IntFilter<"Reservation"> | number
    id_passager?: IntFilter<"Reservation"> | number
    status?: StringFilter<"Reservation"> | string
    passager?: XOR<PassagerRelationFilter, PassagerWhereInput>
    trajet?: XOR<TrajetRelationFilter, TrajetWhereInput>
  }, "id_de_reservation">

  export type ReservationOrderByWithAggregationInput = {
    id_de_reservation?: SortOrder
    id_trajet?: SortOrder
    id_passager?: SortOrder
    status?: SortOrder
    _count?: ReservationCountOrderByAggregateInput
    _avg?: ReservationAvgOrderByAggregateInput
    _max?: ReservationMaxOrderByAggregateInput
    _min?: ReservationMinOrderByAggregateInput
    _sum?: ReservationSumOrderByAggregateInput
  }

  export type ReservationScalarWhereWithAggregatesInput = {
    AND?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    OR?: ReservationScalarWhereWithAggregatesInput[]
    NOT?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    id_de_reservation?: IntWithAggregatesFilter<"Reservation"> | number
    id_trajet?: IntWithAggregatesFilter<"Reservation"> | number
    id_passager?: IntWithAggregatesFilter<"Reservation"> | number
    status?: StringWithAggregatesFilter<"Reservation"> | string
  }

  export type ConducteurWhereInput = {
    AND?: ConducteurWhereInput | ConducteurWhereInput[]
    OR?: ConducteurWhereInput[]
    NOT?: ConducteurWhereInput | ConducteurWhereInput[]
    id_conducteur?: IntFilter<"Conducteur"> | number
    nom_conducteur?: StringFilter<"Conducteur"> | string
    prenom_conducteur?: StringFilter<"Conducteur"> | string
    numero_de_telephone?: StringFilter<"Conducteur"> | string
    modele_du_vehicule?: StringFilter<"Conducteur"> | string
    nombre_de_place_disponible?: IntFilter<"Conducteur"> | number
    photo_conducteur?: StringFilter<"Conducteur"> | string
    photo_du_permis_de_conduire?: StringFilter<"Conducteur"> | string
    carte_crise_et_d_assurance?: StringFilter<"Conducteur"> | string
    trajets?: TrajetListRelationFilter
  }

  export type ConducteurOrderByWithRelationInput = {
    id_conducteur?: SortOrder
    nom_conducteur?: SortOrder
    prenom_conducteur?: SortOrder
    numero_de_telephone?: SortOrder
    modele_du_vehicule?: SortOrder
    nombre_de_place_disponible?: SortOrder
    photo_conducteur?: SortOrder
    photo_du_permis_de_conduire?: SortOrder
    carte_crise_et_d_assurance?: SortOrder
    trajets?: TrajetOrderByRelationAggregateInput
  }

  export type ConducteurWhereUniqueInput = Prisma.AtLeast<{
    id_conducteur?: number
    AND?: ConducteurWhereInput | ConducteurWhereInput[]
    OR?: ConducteurWhereInput[]
    NOT?: ConducteurWhereInput | ConducteurWhereInput[]
    nom_conducteur?: StringFilter<"Conducteur"> | string
    prenom_conducteur?: StringFilter<"Conducteur"> | string
    numero_de_telephone?: StringFilter<"Conducteur"> | string
    modele_du_vehicule?: StringFilter<"Conducteur"> | string
    nombre_de_place_disponible?: IntFilter<"Conducteur"> | number
    photo_conducteur?: StringFilter<"Conducteur"> | string
    photo_du_permis_de_conduire?: StringFilter<"Conducteur"> | string
    carte_crise_et_d_assurance?: StringFilter<"Conducteur"> | string
    trajets?: TrajetListRelationFilter
  }, "id_conducteur">

  export type ConducteurOrderByWithAggregationInput = {
    id_conducteur?: SortOrder
    nom_conducteur?: SortOrder
    prenom_conducteur?: SortOrder
    numero_de_telephone?: SortOrder
    modele_du_vehicule?: SortOrder
    nombre_de_place_disponible?: SortOrder
    photo_conducteur?: SortOrder
    photo_du_permis_de_conduire?: SortOrder
    carte_crise_et_d_assurance?: SortOrder
    _count?: ConducteurCountOrderByAggregateInput
    _avg?: ConducteurAvgOrderByAggregateInput
    _max?: ConducteurMaxOrderByAggregateInput
    _min?: ConducteurMinOrderByAggregateInput
    _sum?: ConducteurSumOrderByAggregateInput
  }

  export type ConducteurScalarWhereWithAggregatesInput = {
    AND?: ConducteurScalarWhereWithAggregatesInput | ConducteurScalarWhereWithAggregatesInput[]
    OR?: ConducteurScalarWhereWithAggregatesInput[]
    NOT?: ConducteurScalarWhereWithAggregatesInput | ConducteurScalarWhereWithAggregatesInput[]
    id_conducteur?: IntWithAggregatesFilter<"Conducteur"> | number
    nom_conducteur?: StringWithAggregatesFilter<"Conducteur"> | string
    prenom_conducteur?: StringWithAggregatesFilter<"Conducteur"> | string
    numero_de_telephone?: StringWithAggregatesFilter<"Conducteur"> | string
    modele_du_vehicule?: StringWithAggregatesFilter<"Conducteur"> | string
    nombre_de_place_disponible?: IntWithAggregatesFilter<"Conducteur"> | number
    photo_conducteur?: StringWithAggregatesFilter<"Conducteur"> | string
    photo_du_permis_de_conduire?: StringWithAggregatesFilter<"Conducteur"> | string
    carte_crise_et_d_assurance?: StringWithAggregatesFilter<"Conducteur"> | string
  }

  export type TrajetWhereInput = {
    AND?: TrajetWhereInput | TrajetWhereInput[]
    OR?: TrajetWhereInput[]
    NOT?: TrajetWhereInput | TrajetWhereInput[]
    id_trajet?: IntFilter<"Trajet"> | number
    id_du_conducteur?: IntFilter<"Trajet"> | number
    destination_d_arrivee?: StringFilter<"Trajet"> | string
    destination_depart?: StringFilter<"Trajet"> | string
    heure_de_depart?: DateTimeFilter<"Trajet"> | Date | string
    heure_d_arrivee?: DateTimeFilter<"Trajet"> | Date | string
    prix_du_trajet?: FloatFilter<"Trajet"> | number
    conducteur?: XOR<ConducteurRelationFilter, ConducteurWhereInput>
    reservations?: ReservationListRelationFilter
  }

  export type TrajetOrderByWithRelationInput = {
    id_trajet?: SortOrder
    id_du_conducteur?: SortOrder
    destination_d_arrivee?: SortOrder
    destination_depart?: SortOrder
    heure_de_depart?: SortOrder
    heure_d_arrivee?: SortOrder
    prix_du_trajet?: SortOrder
    conducteur?: ConducteurOrderByWithRelationInput
    reservations?: ReservationOrderByRelationAggregateInput
  }

  export type TrajetWhereUniqueInput = Prisma.AtLeast<{
    id_trajet?: number
    AND?: TrajetWhereInput | TrajetWhereInput[]
    OR?: TrajetWhereInput[]
    NOT?: TrajetWhereInput | TrajetWhereInput[]
    id_du_conducteur?: IntFilter<"Trajet"> | number
    destination_d_arrivee?: StringFilter<"Trajet"> | string
    destination_depart?: StringFilter<"Trajet"> | string
    heure_de_depart?: DateTimeFilter<"Trajet"> | Date | string
    heure_d_arrivee?: DateTimeFilter<"Trajet"> | Date | string
    prix_du_trajet?: FloatFilter<"Trajet"> | number
    conducteur?: XOR<ConducteurRelationFilter, ConducteurWhereInput>
    reservations?: ReservationListRelationFilter
  }, "id_trajet">

  export type TrajetOrderByWithAggregationInput = {
    id_trajet?: SortOrder
    id_du_conducteur?: SortOrder
    destination_d_arrivee?: SortOrder
    destination_depart?: SortOrder
    heure_de_depart?: SortOrder
    heure_d_arrivee?: SortOrder
    prix_du_trajet?: SortOrder
    _count?: TrajetCountOrderByAggregateInput
    _avg?: TrajetAvgOrderByAggregateInput
    _max?: TrajetMaxOrderByAggregateInput
    _min?: TrajetMinOrderByAggregateInput
    _sum?: TrajetSumOrderByAggregateInput
  }

  export type TrajetScalarWhereWithAggregatesInput = {
    AND?: TrajetScalarWhereWithAggregatesInput | TrajetScalarWhereWithAggregatesInput[]
    OR?: TrajetScalarWhereWithAggregatesInput[]
    NOT?: TrajetScalarWhereWithAggregatesInput | TrajetScalarWhereWithAggregatesInput[]
    id_trajet?: IntWithAggregatesFilter<"Trajet"> | number
    id_du_conducteur?: IntWithAggregatesFilter<"Trajet"> | number
    destination_d_arrivee?: StringWithAggregatesFilter<"Trajet"> | string
    destination_depart?: StringWithAggregatesFilter<"Trajet"> | string
    heure_de_depart?: DateTimeWithAggregatesFilter<"Trajet"> | Date | string
    heure_d_arrivee?: DateTimeWithAggregatesFilter<"Trajet"> | Date | string
    prix_du_trajet?: FloatWithAggregatesFilter<"Trajet"> | number
  }

  export type PassagerCreateInput = {
    nom_passager: string
    prenom_passager: string
    numero_de_telephone: string
    mot_de_passe: string
    photo_passager: string
    reservations?: ReservationCreateNestedManyWithoutPassagerInput
  }

  export type PassagerUncheckedCreateInput = {
    id_passager?: number
    nom_passager: string
    prenom_passager: string
    numero_de_telephone: string
    mot_de_passe: string
    photo_passager: string
    reservations?: ReservationUncheckedCreateNestedManyWithoutPassagerInput
  }

  export type PassagerUpdateInput = {
    nom_passager?: StringFieldUpdateOperationsInput | string
    prenom_passager?: StringFieldUpdateOperationsInput | string
    numero_de_telephone?: StringFieldUpdateOperationsInput | string
    mot_de_passe?: StringFieldUpdateOperationsInput | string
    photo_passager?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUpdateManyWithoutPassagerNestedInput
  }

  export type PassagerUncheckedUpdateInput = {
    id_passager?: IntFieldUpdateOperationsInput | number
    nom_passager?: StringFieldUpdateOperationsInput | string
    prenom_passager?: StringFieldUpdateOperationsInput | string
    numero_de_telephone?: StringFieldUpdateOperationsInput | string
    mot_de_passe?: StringFieldUpdateOperationsInput | string
    photo_passager?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUncheckedUpdateManyWithoutPassagerNestedInput
  }

  export type PassagerCreateManyInput = {
    id_passager?: number
    nom_passager: string
    prenom_passager: string
    numero_de_telephone: string
    mot_de_passe: string
    photo_passager: string
  }

  export type PassagerUpdateManyMutationInput = {
    nom_passager?: StringFieldUpdateOperationsInput | string
    prenom_passager?: StringFieldUpdateOperationsInput | string
    numero_de_telephone?: StringFieldUpdateOperationsInput | string
    mot_de_passe?: StringFieldUpdateOperationsInput | string
    photo_passager?: StringFieldUpdateOperationsInput | string
  }

  export type PassagerUncheckedUpdateManyInput = {
    id_passager?: IntFieldUpdateOperationsInput | number
    nom_passager?: StringFieldUpdateOperationsInput | string
    prenom_passager?: StringFieldUpdateOperationsInput | string
    numero_de_telephone?: StringFieldUpdateOperationsInput | string
    mot_de_passe?: StringFieldUpdateOperationsInput | string
    photo_passager?: StringFieldUpdateOperationsInput | string
  }

  export type ReservationCreateInput = {
    status: string
    passager: PassagerCreateNestedOneWithoutReservationsInput
    trajet: TrajetCreateNestedOneWithoutReservationsInput
  }

  export type ReservationUncheckedCreateInput = {
    id_de_reservation?: number
    id_trajet: number
    id_passager: number
    status: string
  }

  export type ReservationUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    passager?: PassagerUpdateOneRequiredWithoutReservationsNestedInput
    trajet?: TrajetUpdateOneRequiredWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateInput = {
    id_de_reservation?: IntFieldUpdateOperationsInput | number
    id_trajet?: IntFieldUpdateOperationsInput | number
    id_passager?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ReservationCreateManyInput = {
    id_de_reservation?: number
    id_trajet: number
    id_passager: number
    status: string
  }

  export type ReservationUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ReservationUncheckedUpdateManyInput = {
    id_de_reservation?: IntFieldUpdateOperationsInput | number
    id_trajet?: IntFieldUpdateOperationsInput | number
    id_passager?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ConducteurCreateInput = {
    nom_conducteur: string
    prenom_conducteur: string
    numero_de_telephone: string
    modele_du_vehicule: string
    nombre_de_place_disponible: number
    photo_conducteur: string
    photo_du_permis_de_conduire: string
    carte_crise_et_d_assurance: string
    trajets?: TrajetCreateNestedManyWithoutConducteurInput
  }

  export type ConducteurUncheckedCreateInput = {
    id_conducteur?: number
    nom_conducteur: string
    prenom_conducteur: string
    numero_de_telephone: string
    modele_du_vehicule: string
    nombre_de_place_disponible: number
    photo_conducteur: string
    photo_du_permis_de_conduire: string
    carte_crise_et_d_assurance: string
    trajets?: TrajetUncheckedCreateNestedManyWithoutConducteurInput
  }

  export type ConducteurUpdateInput = {
    nom_conducteur?: StringFieldUpdateOperationsInput | string
    prenom_conducteur?: StringFieldUpdateOperationsInput | string
    numero_de_telephone?: StringFieldUpdateOperationsInput | string
    modele_du_vehicule?: StringFieldUpdateOperationsInput | string
    nombre_de_place_disponible?: IntFieldUpdateOperationsInput | number
    photo_conducteur?: StringFieldUpdateOperationsInput | string
    photo_du_permis_de_conduire?: StringFieldUpdateOperationsInput | string
    carte_crise_et_d_assurance?: StringFieldUpdateOperationsInput | string
    trajets?: TrajetUpdateManyWithoutConducteurNestedInput
  }

  export type ConducteurUncheckedUpdateInput = {
    id_conducteur?: IntFieldUpdateOperationsInput | number
    nom_conducteur?: StringFieldUpdateOperationsInput | string
    prenom_conducteur?: StringFieldUpdateOperationsInput | string
    numero_de_telephone?: StringFieldUpdateOperationsInput | string
    modele_du_vehicule?: StringFieldUpdateOperationsInput | string
    nombre_de_place_disponible?: IntFieldUpdateOperationsInput | number
    photo_conducteur?: StringFieldUpdateOperationsInput | string
    photo_du_permis_de_conduire?: StringFieldUpdateOperationsInput | string
    carte_crise_et_d_assurance?: StringFieldUpdateOperationsInput | string
    trajets?: TrajetUncheckedUpdateManyWithoutConducteurNestedInput
  }

  export type ConducteurCreateManyInput = {
    id_conducteur?: number
    nom_conducteur: string
    prenom_conducteur: string
    numero_de_telephone: string
    modele_du_vehicule: string
    nombre_de_place_disponible: number
    photo_conducteur: string
    photo_du_permis_de_conduire: string
    carte_crise_et_d_assurance: string
  }

  export type ConducteurUpdateManyMutationInput = {
    nom_conducteur?: StringFieldUpdateOperationsInput | string
    prenom_conducteur?: StringFieldUpdateOperationsInput | string
    numero_de_telephone?: StringFieldUpdateOperationsInput | string
    modele_du_vehicule?: StringFieldUpdateOperationsInput | string
    nombre_de_place_disponible?: IntFieldUpdateOperationsInput | number
    photo_conducteur?: StringFieldUpdateOperationsInput | string
    photo_du_permis_de_conduire?: StringFieldUpdateOperationsInput | string
    carte_crise_et_d_assurance?: StringFieldUpdateOperationsInput | string
  }

  export type ConducteurUncheckedUpdateManyInput = {
    id_conducteur?: IntFieldUpdateOperationsInput | number
    nom_conducteur?: StringFieldUpdateOperationsInput | string
    prenom_conducteur?: StringFieldUpdateOperationsInput | string
    numero_de_telephone?: StringFieldUpdateOperationsInput | string
    modele_du_vehicule?: StringFieldUpdateOperationsInput | string
    nombre_de_place_disponible?: IntFieldUpdateOperationsInput | number
    photo_conducteur?: StringFieldUpdateOperationsInput | string
    photo_du_permis_de_conduire?: StringFieldUpdateOperationsInput | string
    carte_crise_et_d_assurance?: StringFieldUpdateOperationsInput | string
  }

  export type TrajetCreateInput = {
    destination_d_arrivee: string
    destination_depart: string
    heure_de_depart: Date | string
    heure_d_arrivee: Date | string
    prix_du_trajet: number
    conducteur: ConducteurCreateNestedOneWithoutTrajetsInput
    reservations?: ReservationCreateNestedManyWithoutTrajetInput
  }

  export type TrajetUncheckedCreateInput = {
    id_trajet?: number
    id_du_conducteur: number
    destination_d_arrivee: string
    destination_depart: string
    heure_de_depart: Date | string
    heure_d_arrivee: Date | string
    prix_du_trajet: number
    reservations?: ReservationUncheckedCreateNestedManyWithoutTrajetInput
  }

  export type TrajetUpdateInput = {
    destination_d_arrivee?: StringFieldUpdateOperationsInput | string
    destination_depart?: StringFieldUpdateOperationsInput | string
    heure_de_depart?: DateTimeFieldUpdateOperationsInput | Date | string
    heure_d_arrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    prix_du_trajet?: FloatFieldUpdateOperationsInput | number
    conducteur?: ConducteurUpdateOneRequiredWithoutTrajetsNestedInput
    reservations?: ReservationUpdateManyWithoutTrajetNestedInput
  }

  export type TrajetUncheckedUpdateInput = {
    id_trajet?: IntFieldUpdateOperationsInput | number
    id_du_conducteur?: IntFieldUpdateOperationsInput | number
    destination_d_arrivee?: StringFieldUpdateOperationsInput | string
    destination_depart?: StringFieldUpdateOperationsInput | string
    heure_de_depart?: DateTimeFieldUpdateOperationsInput | Date | string
    heure_d_arrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    prix_du_trajet?: FloatFieldUpdateOperationsInput | number
    reservations?: ReservationUncheckedUpdateManyWithoutTrajetNestedInput
  }

  export type TrajetCreateManyInput = {
    id_trajet?: number
    id_du_conducteur: number
    destination_d_arrivee: string
    destination_depart: string
    heure_de_depart: Date | string
    heure_d_arrivee: Date | string
    prix_du_trajet: number
  }

  export type TrajetUpdateManyMutationInput = {
    destination_d_arrivee?: StringFieldUpdateOperationsInput | string
    destination_depart?: StringFieldUpdateOperationsInput | string
    heure_de_depart?: DateTimeFieldUpdateOperationsInput | Date | string
    heure_d_arrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    prix_du_trajet?: FloatFieldUpdateOperationsInput | number
  }

  export type TrajetUncheckedUpdateManyInput = {
    id_trajet?: IntFieldUpdateOperationsInput | number
    id_du_conducteur?: IntFieldUpdateOperationsInput | number
    destination_d_arrivee?: StringFieldUpdateOperationsInput | string
    destination_depart?: StringFieldUpdateOperationsInput | string
    heure_de_depart?: DateTimeFieldUpdateOperationsInput | Date | string
    heure_d_arrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    prix_du_trajet?: FloatFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ReservationListRelationFilter = {
    every?: ReservationWhereInput
    some?: ReservationWhereInput
    none?: ReservationWhereInput
  }

  export type ReservationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PassagerCountOrderByAggregateInput = {
    id_passager?: SortOrder
    nom_passager?: SortOrder
    prenom_passager?: SortOrder
    numero_de_telephone?: SortOrder
    mot_de_passe?: SortOrder
    photo_passager?: SortOrder
  }

  export type PassagerAvgOrderByAggregateInput = {
    id_passager?: SortOrder
  }

  export type PassagerMaxOrderByAggregateInput = {
    id_passager?: SortOrder
    nom_passager?: SortOrder
    prenom_passager?: SortOrder
    numero_de_telephone?: SortOrder
    mot_de_passe?: SortOrder
    photo_passager?: SortOrder
  }

  export type PassagerMinOrderByAggregateInput = {
    id_passager?: SortOrder
    nom_passager?: SortOrder
    prenom_passager?: SortOrder
    numero_de_telephone?: SortOrder
    mot_de_passe?: SortOrder
    photo_passager?: SortOrder
  }

  export type PassagerSumOrderByAggregateInput = {
    id_passager?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type PassagerRelationFilter = {
    is?: PassagerWhereInput
    isNot?: PassagerWhereInput
  }

  export type TrajetRelationFilter = {
    is?: TrajetWhereInput
    isNot?: TrajetWhereInput
  }

  export type ReservationCountOrderByAggregateInput = {
    id_de_reservation?: SortOrder
    id_trajet?: SortOrder
    id_passager?: SortOrder
    status?: SortOrder
  }

  export type ReservationAvgOrderByAggregateInput = {
    id_de_reservation?: SortOrder
    id_trajet?: SortOrder
    id_passager?: SortOrder
  }

  export type ReservationMaxOrderByAggregateInput = {
    id_de_reservation?: SortOrder
    id_trajet?: SortOrder
    id_passager?: SortOrder
    status?: SortOrder
  }

  export type ReservationMinOrderByAggregateInput = {
    id_de_reservation?: SortOrder
    id_trajet?: SortOrder
    id_passager?: SortOrder
    status?: SortOrder
  }

  export type ReservationSumOrderByAggregateInput = {
    id_de_reservation?: SortOrder
    id_trajet?: SortOrder
    id_passager?: SortOrder
  }

  export type TrajetListRelationFilter = {
    every?: TrajetWhereInput
    some?: TrajetWhereInput
    none?: TrajetWhereInput
  }

  export type TrajetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConducteurCountOrderByAggregateInput = {
    id_conducteur?: SortOrder
    nom_conducteur?: SortOrder
    prenom_conducteur?: SortOrder
    numero_de_telephone?: SortOrder
    modele_du_vehicule?: SortOrder
    nombre_de_place_disponible?: SortOrder
    photo_conducteur?: SortOrder
    photo_du_permis_de_conduire?: SortOrder
    carte_crise_et_d_assurance?: SortOrder
  }

  export type ConducteurAvgOrderByAggregateInput = {
    id_conducteur?: SortOrder
    nombre_de_place_disponible?: SortOrder
  }

  export type ConducteurMaxOrderByAggregateInput = {
    id_conducteur?: SortOrder
    nom_conducteur?: SortOrder
    prenom_conducteur?: SortOrder
    numero_de_telephone?: SortOrder
    modele_du_vehicule?: SortOrder
    nombre_de_place_disponible?: SortOrder
    photo_conducteur?: SortOrder
    photo_du_permis_de_conduire?: SortOrder
    carte_crise_et_d_assurance?: SortOrder
  }

  export type ConducteurMinOrderByAggregateInput = {
    id_conducteur?: SortOrder
    nom_conducteur?: SortOrder
    prenom_conducteur?: SortOrder
    numero_de_telephone?: SortOrder
    modele_du_vehicule?: SortOrder
    nombre_de_place_disponible?: SortOrder
    photo_conducteur?: SortOrder
    photo_du_permis_de_conduire?: SortOrder
    carte_crise_et_d_assurance?: SortOrder
  }

  export type ConducteurSumOrderByAggregateInput = {
    id_conducteur?: SortOrder
    nombre_de_place_disponible?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ConducteurRelationFilter = {
    is?: ConducteurWhereInput
    isNot?: ConducteurWhereInput
  }

  export type TrajetCountOrderByAggregateInput = {
    id_trajet?: SortOrder
    id_du_conducteur?: SortOrder
    destination_d_arrivee?: SortOrder
    destination_depart?: SortOrder
    heure_de_depart?: SortOrder
    heure_d_arrivee?: SortOrder
    prix_du_trajet?: SortOrder
  }

  export type TrajetAvgOrderByAggregateInput = {
    id_trajet?: SortOrder
    id_du_conducteur?: SortOrder
    prix_du_trajet?: SortOrder
  }

  export type TrajetMaxOrderByAggregateInput = {
    id_trajet?: SortOrder
    id_du_conducteur?: SortOrder
    destination_d_arrivee?: SortOrder
    destination_depart?: SortOrder
    heure_de_depart?: SortOrder
    heure_d_arrivee?: SortOrder
    prix_du_trajet?: SortOrder
  }

  export type TrajetMinOrderByAggregateInput = {
    id_trajet?: SortOrder
    id_du_conducteur?: SortOrder
    destination_d_arrivee?: SortOrder
    destination_depart?: SortOrder
    heure_de_depart?: SortOrder
    heure_d_arrivee?: SortOrder
    prix_du_trajet?: SortOrder
  }

  export type TrajetSumOrderByAggregateInput = {
    id_trajet?: SortOrder
    id_du_conducteur?: SortOrder
    prix_du_trajet?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ReservationCreateNestedManyWithoutPassagerInput = {
    create?: XOR<ReservationCreateWithoutPassagerInput, ReservationUncheckedCreateWithoutPassagerInput> | ReservationCreateWithoutPassagerInput[] | ReservationUncheckedCreateWithoutPassagerInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutPassagerInput | ReservationCreateOrConnectWithoutPassagerInput[]
    createMany?: ReservationCreateManyPassagerInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type ReservationUncheckedCreateNestedManyWithoutPassagerInput = {
    create?: XOR<ReservationCreateWithoutPassagerInput, ReservationUncheckedCreateWithoutPassagerInput> | ReservationCreateWithoutPassagerInput[] | ReservationUncheckedCreateWithoutPassagerInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutPassagerInput | ReservationCreateOrConnectWithoutPassagerInput[]
    createMany?: ReservationCreateManyPassagerInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ReservationUpdateManyWithoutPassagerNestedInput = {
    create?: XOR<ReservationCreateWithoutPassagerInput, ReservationUncheckedCreateWithoutPassagerInput> | ReservationCreateWithoutPassagerInput[] | ReservationUncheckedCreateWithoutPassagerInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutPassagerInput | ReservationCreateOrConnectWithoutPassagerInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutPassagerInput | ReservationUpsertWithWhereUniqueWithoutPassagerInput[]
    createMany?: ReservationCreateManyPassagerInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutPassagerInput | ReservationUpdateWithWhereUniqueWithoutPassagerInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutPassagerInput | ReservationUpdateManyWithWhereWithoutPassagerInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ReservationUncheckedUpdateManyWithoutPassagerNestedInput = {
    create?: XOR<ReservationCreateWithoutPassagerInput, ReservationUncheckedCreateWithoutPassagerInput> | ReservationCreateWithoutPassagerInput[] | ReservationUncheckedCreateWithoutPassagerInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutPassagerInput | ReservationCreateOrConnectWithoutPassagerInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutPassagerInput | ReservationUpsertWithWhereUniqueWithoutPassagerInput[]
    createMany?: ReservationCreateManyPassagerInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutPassagerInput | ReservationUpdateWithWhereUniqueWithoutPassagerInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutPassagerInput | ReservationUpdateManyWithWhereWithoutPassagerInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type PassagerCreateNestedOneWithoutReservationsInput = {
    create?: XOR<PassagerCreateWithoutReservationsInput, PassagerUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: PassagerCreateOrConnectWithoutReservationsInput
    connect?: PassagerWhereUniqueInput
  }

  export type TrajetCreateNestedOneWithoutReservationsInput = {
    create?: XOR<TrajetCreateWithoutReservationsInput, TrajetUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: TrajetCreateOrConnectWithoutReservationsInput
    connect?: TrajetWhereUniqueInput
  }

  export type PassagerUpdateOneRequiredWithoutReservationsNestedInput = {
    create?: XOR<PassagerCreateWithoutReservationsInput, PassagerUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: PassagerCreateOrConnectWithoutReservationsInput
    upsert?: PassagerUpsertWithoutReservationsInput
    connect?: PassagerWhereUniqueInput
    update?: XOR<XOR<PassagerUpdateToOneWithWhereWithoutReservationsInput, PassagerUpdateWithoutReservationsInput>, PassagerUncheckedUpdateWithoutReservationsInput>
  }

  export type TrajetUpdateOneRequiredWithoutReservationsNestedInput = {
    create?: XOR<TrajetCreateWithoutReservationsInput, TrajetUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: TrajetCreateOrConnectWithoutReservationsInput
    upsert?: TrajetUpsertWithoutReservationsInput
    connect?: TrajetWhereUniqueInput
    update?: XOR<XOR<TrajetUpdateToOneWithWhereWithoutReservationsInput, TrajetUpdateWithoutReservationsInput>, TrajetUncheckedUpdateWithoutReservationsInput>
  }

  export type TrajetCreateNestedManyWithoutConducteurInput = {
    create?: XOR<TrajetCreateWithoutConducteurInput, TrajetUncheckedCreateWithoutConducteurInput> | TrajetCreateWithoutConducteurInput[] | TrajetUncheckedCreateWithoutConducteurInput[]
    connectOrCreate?: TrajetCreateOrConnectWithoutConducteurInput | TrajetCreateOrConnectWithoutConducteurInput[]
    createMany?: TrajetCreateManyConducteurInputEnvelope
    connect?: TrajetWhereUniqueInput | TrajetWhereUniqueInput[]
  }

  export type TrajetUncheckedCreateNestedManyWithoutConducteurInput = {
    create?: XOR<TrajetCreateWithoutConducteurInput, TrajetUncheckedCreateWithoutConducteurInput> | TrajetCreateWithoutConducteurInput[] | TrajetUncheckedCreateWithoutConducteurInput[]
    connectOrCreate?: TrajetCreateOrConnectWithoutConducteurInput | TrajetCreateOrConnectWithoutConducteurInput[]
    createMany?: TrajetCreateManyConducteurInputEnvelope
    connect?: TrajetWhereUniqueInput | TrajetWhereUniqueInput[]
  }

  export type TrajetUpdateManyWithoutConducteurNestedInput = {
    create?: XOR<TrajetCreateWithoutConducteurInput, TrajetUncheckedCreateWithoutConducteurInput> | TrajetCreateWithoutConducteurInput[] | TrajetUncheckedCreateWithoutConducteurInput[]
    connectOrCreate?: TrajetCreateOrConnectWithoutConducteurInput | TrajetCreateOrConnectWithoutConducteurInput[]
    upsert?: TrajetUpsertWithWhereUniqueWithoutConducteurInput | TrajetUpsertWithWhereUniqueWithoutConducteurInput[]
    createMany?: TrajetCreateManyConducteurInputEnvelope
    set?: TrajetWhereUniqueInput | TrajetWhereUniqueInput[]
    disconnect?: TrajetWhereUniqueInput | TrajetWhereUniqueInput[]
    delete?: TrajetWhereUniqueInput | TrajetWhereUniqueInput[]
    connect?: TrajetWhereUniqueInput | TrajetWhereUniqueInput[]
    update?: TrajetUpdateWithWhereUniqueWithoutConducteurInput | TrajetUpdateWithWhereUniqueWithoutConducteurInput[]
    updateMany?: TrajetUpdateManyWithWhereWithoutConducteurInput | TrajetUpdateManyWithWhereWithoutConducteurInput[]
    deleteMany?: TrajetScalarWhereInput | TrajetScalarWhereInput[]
  }

  export type TrajetUncheckedUpdateManyWithoutConducteurNestedInput = {
    create?: XOR<TrajetCreateWithoutConducteurInput, TrajetUncheckedCreateWithoutConducteurInput> | TrajetCreateWithoutConducteurInput[] | TrajetUncheckedCreateWithoutConducteurInput[]
    connectOrCreate?: TrajetCreateOrConnectWithoutConducteurInput | TrajetCreateOrConnectWithoutConducteurInput[]
    upsert?: TrajetUpsertWithWhereUniqueWithoutConducteurInput | TrajetUpsertWithWhereUniqueWithoutConducteurInput[]
    createMany?: TrajetCreateManyConducteurInputEnvelope
    set?: TrajetWhereUniqueInput | TrajetWhereUniqueInput[]
    disconnect?: TrajetWhereUniqueInput | TrajetWhereUniqueInput[]
    delete?: TrajetWhereUniqueInput | TrajetWhereUniqueInput[]
    connect?: TrajetWhereUniqueInput | TrajetWhereUniqueInput[]
    update?: TrajetUpdateWithWhereUniqueWithoutConducteurInput | TrajetUpdateWithWhereUniqueWithoutConducteurInput[]
    updateMany?: TrajetUpdateManyWithWhereWithoutConducteurInput | TrajetUpdateManyWithWhereWithoutConducteurInput[]
    deleteMany?: TrajetScalarWhereInput | TrajetScalarWhereInput[]
  }

  export type ConducteurCreateNestedOneWithoutTrajetsInput = {
    create?: XOR<ConducteurCreateWithoutTrajetsInput, ConducteurUncheckedCreateWithoutTrajetsInput>
    connectOrCreate?: ConducteurCreateOrConnectWithoutTrajetsInput
    connect?: ConducteurWhereUniqueInput
  }

  export type ReservationCreateNestedManyWithoutTrajetInput = {
    create?: XOR<ReservationCreateWithoutTrajetInput, ReservationUncheckedCreateWithoutTrajetInput> | ReservationCreateWithoutTrajetInput[] | ReservationUncheckedCreateWithoutTrajetInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutTrajetInput | ReservationCreateOrConnectWithoutTrajetInput[]
    createMany?: ReservationCreateManyTrajetInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type ReservationUncheckedCreateNestedManyWithoutTrajetInput = {
    create?: XOR<ReservationCreateWithoutTrajetInput, ReservationUncheckedCreateWithoutTrajetInput> | ReservationCreateWithoutTrajetInput[] | ReservationUncheckedCreateWithoutTrajetInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutTrajetInput | ReservationCreateOrConnectWithoutTrajetInput[]
    createMany?: ReservationCreateManyTrajetInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ConducteurUpdateOneRequiredWithoutTrajetsNestedInput = {
    create?: XOR<ConducteurCreateWithoutTrajetsInput, ConducteurUncheckedCreateWithoutTrajetsInput>
    connectOrCreate?: ConducteurCreateOrConnectWithoutTrajetsInput
    upsert?: ConducteurUpsertWithoutTrajetsInput
    connect?: ConducteurWhereUniqueInput
    update?: XOR<XOR<ConducteurUpdateToOneWithWhereWithoutTrajetsInput, ConducteurUpdateWithoutTrajetsInput>, ConducteurUncheckedUpdateWithoutTrajetsInput>
  }

  export type ReservationUpdateManyWithoutTrajetNestedInput = {
    create?: XOR<ReservationCreateWithoutTrajetInput, ReservationUncheckedCreateWithoutTrajetInput> | ReservationCreateWithoutTrajetInput[] | ReservationUncheckedCreateWithoutTrajetInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutTrajetInput | ReservationCreateOrConnectWithoutTrajetInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutTrajetInput | ReservationUpsertWithWhereUniqueWithoutTrajetInput[]
    createMany?: ReservationCreateManyTrajetInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutTrajetInput | ReservationUpdateWithWhereUniqueWithoutTrajetInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutTrajetInput | ReservationUpdateManyWithWhereWithoutTrajetInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type ReservationUncheckedUpdateManyWithoutTrajetNestedInput = {
    create?: XOR<ReservationCreateWithoutTrajetInput, ReservationUncheckedCreateWithoutTrajetInput> | ReservationCreateWithoutTrajetInput[] | ReservationUncheckedCreateWithoutTrajetInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutTrajetInput | ReservationCreateOrConnectWithoutTrajetInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutTrajetInput | ReservationUpsertWithWhereUniqueWithoutTrajetInput[]
    createMany?: ReservationCreateManyTrajetInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutTrajetInput | ReservationUpdateWithWhereUniqueWithoutTrajetInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutTrajetInput | ReservationUpdateManyWithWhereWithoutTrajetInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ReservationCreateWithoutPassagerInput = {
    status: string
    trajet: TrajetCreateNestedOneWithoutReservationsInput
  }

  export type ReservationUncheckedCreateWithoutPassagerInput = {
    id_de_reservation?: number
    id_trajet: number
    status: string
  }

  export type ReservationCreateOrConnectWithoutPassagerInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutPassagerInput, ReservationUncheckedCreateWithoutPassagerInput>
  }

  export type ReservationCreateManyPassagerInputEnvelope = {
    data: ReservationCreateManyPassagerInput | ReservationCreateManyPassagerInput[]
    skipDuplicates?: boolean
  }

  export type ReservationUpsertWithWhereUniqueWithoutPassagerInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutPassagerInput, ReservationUncheckedUpdateWithoutPassagerInput>
    create: XOR<ReservationCreateWithoutPassagerInput, ReservationUncheckedCreateWithoutPassagerInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutPassagerInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutPassagerInput, ReservationUncheckedUpdateWithoutPassagerInput>
  }

  export type ReservationUpdateManyWithWhereWithoutPassagerInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutPassagerInput>
  }

  export type ReservationScalarWhereInput = {
    AND?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
    OR?: ReservationScalarWhereInput[]
    NOT?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
    id_de_reservation?: IntFilter<"Reservation"> | number
    id_trajet?: IntFilter<"Reservation"> | number
    id_passager?: IntFilter<"Reservation"> | number
    status?: StringFilter<"Reservation"> | string
  }

  export type PassagerCreateWithoutReservationsInput = {
    nom_passager: string
    prenom_passager: string
    numero_de_telephone: string
    mot_de_passe: string
    photo_passager: string
  }

  export type PassagerUncheckedCreateWithoutReservationsInput = {
    id_passager?: number
    nom_passager: string
    prenom_passager: string
    numero_de_telephone: string
    mot_de_passe: string
    photo_passager: string
  }

  export type PassagerCreateOrConnectWithoutReservationsInput = {
    where: PassagerWhereUniqueInput
    create: XOR<PassagerCreateWithoutReservationsInput, PassagerUncheckedCreateWithoutReservationsInput>
  }

  export type TrajetCreateWithoutReservationsInput = {
    destination_d_arrivee: string
    destination_depart: string
    heure_de_depart: Date | string
    heure_d_arrivee: Date | string
    prix_du_trajet: number
    conducteur: ConducteurCreateNestedOneWithoutTrajetsInput
  }

  export type TrajetUncheckedCreateWithoutReservationsInput = {
    id_trajet?: number
    id_du_conducteur: number
    destination_d_arrivee: string
    destination_depart: string
    heure_de_depart: Date | string
    heure_d_arrivee: Date | string
    prix_du_trajet: number
  }

  export type TrajetCreateOrConnectWithoutReservationsInput = {
    where: TrajetWhereUniqueInput
    create: XOR<TrajetCreateWithoutReservationsInput, TrajetUncheckedCreateWithoutReservationsInput>
  }

  export type PassagerUpsertWithoutReservationsInput = {
    update: XOR<PassagerUpdateWithoutReservationsInput, PassagerUncheckedUpdateWithoutReservationsInput>
    create: XOR<PassagerCreateWithoutReservationsInput, PassagerUncheckedCreateWithoutReservationsInput>
    where?: PassagerWhereInput
  }

  export type PassagerUpdateToOneWithWhereWithoutReservationsInput = {
    where?: PassagerWhereInput
    data: XOR<PassagerUpdateWithoutReservationsInput, PassagerUncheckedUpdateWithoutReservationsInput>
  }

  export type PassagerUpdateWithoutReservationsInput = {
    nom_passager?: StringFieldUpdateOperationsInput | string
    prenom_passager?: StringFieldUpdateOperationsInput | string
    numero_de_telephone?: StringFieldUpdateOperationsInput | string
    mot_de_passe?: StringFieldUpdateOperationsInput | string
    photo_passager?: StringFieldUpdateOperationsInput | string
  }

  export type PassagerUncheckedUpdateWithoutReservationsInput = {
    id_passager?: IntFieldUpdateOperationsInput | number
    nom_passager?: StringFieldUpdateOperationsInput | string
    prenom_passager?: StringFieldUpdateOperationsInput | string
    numero_de_telephone?: StringFieldUpdateOperationsInput | string
    mot_de_passe?: StringFieldUpdateOperationsInput | string
    photo_passager?: StringFieldUpdateOperationsInput | string
  }

  export type TrajetUpsertWithoutReservationsInput = {
    update: XOR<TrajetUpdateWithoutReservationsInput, TrajetUncheckedUpdateWithoutReservationsInput>
    create: XOR<TrajetCreateWithoutReservationsInput, TrajetUncheckedCreateWithoutReservationsInput>
    where?: TrajetWhereInput
  }

  export type TrajetUpdateToOneWithWhereWithoutReservationsInput = {
    where?: TrajetWhereInput
    data: XOR<TrajetUpdateWithoutReservationsInput, TrajetUncheckedUpdateWithoutReservationsInput>
  }

  export type TrajetUpdateWithoutReservationsInput = {
    destination_d_arrivee?: StringFieldUpdateOperationsInput | string
    destination_depart?: StringFieldUpdateOperationsInput | string
    heure_de_depart?: DateTimeFieldUpdateOperationsInput | Date | string
    heure_d_arrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    prix_du_trajet?: FloatFieldUpdateOperationsInput | number
    conducteur?: ConducteurUpdateOneRequiredWithoutTrajetsNestedInput
  }

  export type TrajetUncheckedUpdateWithoutReservationsInput = {
    id_trajet?: IntFieldUpdateOperationsInput | number
    id_du_conducteur?: IntFieldUpdateOperationsInput | number
    destination_d_arrivee?: StringFieldUpdateOperationsInput | string
    destination_depart?: StringFieldUpdateOperationsInput | string
    heure_de_depart?: DateTimeFieldUpdateOperationsInput | Date | string
    heure_d_arrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    prix_du_trajet?: FloatFieldUpdateOperationsInput | number
  }

  export type TrajetCreateWithoutConducteurInput = {
    destination_d_arrivee: string
    destination_depart: string
    heure_de_depart: Date | string
    heure_d_arrivee: Date | string
    prix_du_trajet: number
    reservations?: ReservationCreateNestedManyWithoutTrajetInput
  }

  export type TrajetUncheckedCreateWithoutConducteurInput = {
    id_trajet?: number
    destination_d_arrivee: string
    destination_depart: string
    heure_de_depart: Date | string
    heure_d_arrivee: Date | string
    prix_du_trajet: number
    reservations?: ReservationUncheckedCreateNestedManyWithoutTrajetInput
  }

  export type TrajetCreateOrConnectWithoutConducteurInput = {
    where: TrajetWhereUniqueInput
    create: XOR<TrajetCreateWithoutConducteurInput, TrajetUncheckedCreateWithoutConducteurInput>
  }

  export type TrajetCreateManyConducteurInputEnvelope = {
    data: TrajetCreateManyConducteurInput | TrajetCreateManyConducteurInput[]
    skipDuplicates?: boolean
  }

  export type TrajetUpsertWithWhereUniqueWithoutConducteurInput = {
    where: TrajetWhereUniqueInput
    update: XOR<TrajetUpdateWithoutConducteurInput, TrajetUncheckedUpdateWithoutConducteurInput>
    create: XOR<TrajetCreateWithoutConducteurInput, TrajetUncheckedCreateWithoutConducteurInput>
  }

  export type TrajetUpdateWithWhereUniqueWithoutConducteurInput = {
    where: TrajetWhereUniqueInput
    data: XOR<TrajetUpdateWithoutConducteurInput, TrajetUncheckedUpdateWithoutConducteurInput>
  }

  export type TrajetUpdateManyWithWhereWithoutConducteurInput = {
    where: TrajetScalarWhereInput
    data: XOR<TrajetUpdateManyMutationInput, TrajetUncheckedUpdateManyWithoutConducteurInput>
  }

  export type TrajetScalarWhereInput = {
    AND?: TrajetScalarWhereInput | TrajetScalarWhereInput[]
    OR?: TrajetScalarWhereInput[]
    NOT?: TrajetScalarWhereInput | TrajetScalarWhereInput[]
    id_trajet?: IntFilter<"Trajet"> | number
    id_du_conducteur?: IntFilter<"Trajet"> | number
    destination_d_arrivee?: StringFilter<"Trajet"> | string
    destination_depart?: StringFilter<"Trajet"> | string
    heure_de_depart?: DateTimeFilter<"Trajet"> | Date | string
    heure_d_arrivee?: DateTimeFilter<"Trajet"> | Date | string
    prix_du_trajet?: FloatFilter<"Trajet"> | number
  }

  export type ConducteurCreateWithoutTrajetsInput = {
    nom_conducteur: string
    prenom_conducteur: string
    numero_de_telephone: string
    modele_du_vehicule: string
    nombre_de_place_disponible: number
    photo_conducteur: string
    photo_du_permis_de_conduire: string
    carte_crise_et_d_assurance: string
  }

  export type ConducteurUncheckedCreateWithoutTrajetsInput = {
    id_conducteur?: number
    nom_conducteur: string
    prenom_conducteur: string
    numero_de_telephone: string
    modele_du_vehicule: string
    nombre_de_place_disponible: number
    photo_conducteur: string
    photo_du_permis_de_conduire: string
    carte_crise_et_d_assurance: string
  }

  export type ConducteurCreateOrConnectWithoutTrajetsInput = {
    where: ConducteurWhereUniqueInput
    create: XOR<ConducteurCreateWithoutTrajetsInput, ConducteurUncheckedCreateWithoutTrajetsInput>
  }

  export type ReservationCreateWithoutTrajetInput = {
    status: string
    passager: PassagerCreateNestedOneWithoutReservationsInput
  }

  export type ReservationUncheckedCreateWithoutTrajetInput = {
    id_de_reservation?: number
    id_passager: number
    status: string
  }

  export type ReservationCreateOrConnectWithoutTrajetInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutTrajetInput, ReservationUncheckedCreateWithoutTrajetInput>
  }

  export type ReservationCreateManyTrajetInputEnvelope = {
    data: ReservationCreateManyTrajetInput | ReservationCreateManyTrajetInput[]
    skipDuplicates?: boolean
  }

  export type ConducteurUpsertWithoutTrajetsInput = {
    update: XOR<ConducteurUpdateWithoutTrajetsInput, ConducteurUncheckedUpdateWithoutTrajetsInput>
    create: XOR<ConducteurCreateWithoutTrajetsInput, ConducteurUncheckedCreateWithoutTrajetsInput>
    where?: ConducteurWhereInput
  }

  export type ConducteurUpdateToOneWithWhereWithoutTrajetsInput = {
    where?: ConducteurWhereInput
    data: XOR<ConducteurUpdateWithoutTrajetsInput, ConducteurUncheckedUpdateWithoutTrajetsInput>
  }

  export type ConducteurUpdateWithoutTrajetsInput = {
    nom_conducteur?: StringFieldUpdateOperationsInput | string
    prenom_conducteur?: StringFieldUpdateOperationsInput | string
    numero_de_telephone?: StringFieldUpdateOperationsInput | string
    modele_du_vehicule?: StringFieldUpdateOperationsInput | string
    nombre_de_place_disponible?: IntFieldUpdateOperationsInput | number
    photo_conducteur?: StringFieldUpdateOperationsInput | string
    photo_du_permis_de_conduire?: StringFieldUpdateOperationsInput | string
    carte_crise_et_d_assurance?: StringFieldUpdateOperationsInput | string
  }

  export type ConducteurUncheckedUpdateWithoutTrajetsInput = {
    id_conducteur?: IntFieldUpdateOperationsInput | number
    nom_conducteur?: StringFieldUpdateOperationsInput | string
    prenom_conducteur?: StringFieldUpdateOperationsInput | string
    numero_de_telephone?: StringFieldUpdateOperationsInput | string
    modele_du_vehicule?: StringFieldUpdateOperationsInput | string
    nombre_de_place_disponible?: IntFieldUpdateOperationsInput | number
    photo_conducteur?: StringFieldUpdateOperationsInput | string
    photo_du_permis_de_conduire?: StringFieldUpdateOperationsInput | string
    carte_crise_et_d_assurance?: StringFieldUpdateOperationsInput | string
  }

  export type ReservationUpsertWithWhereUniqueWithoutTrajetInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutTrajetInput, ReservationUncheckedUpdateWithoutTrajetInput>
    create: XOR<ReservationCreateWithoutTrajetInput, ReservationUncheckedCreateWithoutTrajetInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutTrajetInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutTrajetInput, ReservationUncheckedUpdateWithoutTrajetInput>
  }

  export type ReservationUpdateManyWithWhereWithoutTrajetInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutTrajetInput>
  }

  export type ReservationCreateManyPassagerInput = {
    id_de_reservation?: number
    id_trajet: number
    status: string
  }

  export type ReservationUpdateWithoutPassagerInput = {
    status?: StringFieldUpdateOperationsInput | string
    trajet?: TrajetUpdateOneRequiredWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateWithoutPassagerInput = {
    id_de_reservation?: IntFieldUpdateOperationsInput | number
    id_trajet?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ReservationUncheckedUpdateManyWithoutPassagerInput = {
    id_de_reservation?: IntFieldUpdateOperationsInput | number
    id_trajet?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type TrajetCreateManyConducteurInput = {
    id_trajet?: number
    destination_d_arrivee: string
    destination_depart: string
    heure_de_depart: Date | string
    heure_d_arrivee: Date | string
    prix_du_trajet: number
  }

  export type TrajetUpdateWithoutConducteurInput = {
    destination_d_arrivee?: StringFieldUpdateOperationsInput | string
    destination_depart?: StringFieldUpdateOperationsInput | string
    heure_de_depart?: DateTimeFieldUpdateOperationsInput | Date | string
    heure_d_arrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    prix_du_trajet?: FloatFieldUpdateOperationsInput | number
    reservations?: ReservationUpdateManyWithoutTrajetNestedInput
  }

  export type TrajetUncheckedUpdateWithoutConducteurInput = {
    id_trajet?: IntFieldUpdateOperationsInput | number
    destination_d_arrivee?: StringFieldUpdateOperationsInput | string
    destination_depart?: StringFieldUpdateOperationsInput | string
    heure_de_depart?: DateTimeFieldUpdateOperationsInput | Date | string
    heure_d_arrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    prix_du_trajet?: FloatFieldUpdateOperationsInput | number
    reservations?: ReservationUncheckedUpdateManyWithoutTrajetNestedInput
  }

  export type TrajetUncheckedUpdateManyWithoutConducteurInput = {
    id_trajet?: IntFieldUpdateOperationsInput | number
    destination_d_arrivee?: StringFieldUpdateOperationsInput | string
    destination_depart?: StringFieldUpdateOperationsInput | string
    heure_de_depart?: DateTimeFieldUpdateOperationsInput | Date | string
    heure_d_arrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    prix_du_trajet?: FloatFieldUpdateOperationsInput | number
  }

  export type ReservationCreateManyTrajetInput = {
    id_de_reservation?: number
    id_passager: number
    status: string
  }

  export type ReservationUpdateWithoutTrajetInput = {
    status?: StringFieldUpdateOperationsInput | string
    passager?: PassagerUpdateOneRequiredWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateWithoutTrajetInput = {
    id_de_reservation?: IntFieldUpdateOperationsInput | number
    id_passager?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ReservationUncheckedUpdateManyWithoutTrajetInput = {
    id_de_reservation?: IntFieldUpdateOperationsInput | number
    id_passager?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PassagerCountOutputTypeDefaultArgs instead
     */
    export type PassagerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PassagerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConducteurCountOutputTypeDefaultArgs instead
     */
    export type ConducteurCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConducteurCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrajetCountOutputTypeDefaultArgs instead
     */
    export type TrajetCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrajetCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PassagerDefaultArgs instead
     */
    export type PassagerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PassagerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReservationDefaultArgs instead
     */
    export type ReservationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReservationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConducteurDefaultArgs instead
     */
    export type ConducteurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConducteurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrajetDefaultArgs instead
     */
    export type TrajetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrajetDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}